#ifndef STR_HPP
#define STR_HPP

#include <string>
#include <vector>
#include <locale>
#include <codecvt>
#include <sstream>

namespace osl {

std::vector<std::string> split(const std::string &s, char delim)
{
  std::vector<std::string> elems;
  std::stringstream ss(s);
  std::string item;  

  while (std::getline(ss, item, delim))
  {
    elems.push_back(item);
  }

  return elems;
}

std::vector<std::string> split(std::string s, std::string delim) 
{
    size_t pos_start = 0, pos_end, delim_len = delim.length();
    std::string token;
    std::vector<std::string> res;

    while ((pos_end = s.find (delim, pos_start)) != std::string::npos) 
    {
        token = s.substr (pos_start, pos_end - pos_start);
        pos_start = pos_end + delim_len;
        res.push_back (token);
    }

    res.push_back (s.substr (pos_start));

    return res;
}

std::vector<std::wstring> wsplit(std::wstring s, std::wstring delim) 
{
    size_t pos_start = 0, pos_end, delim_len = delim.length();
    std::wstring token;
    std::vector<std::wstring> res;

    while ((pos_end = s.find (delim, pos_start)) != std::string::npos) 
    {
        token = s.substr (pos_start, pos_end - pos_start);
        pos_start = pos_end + delim_len;
        res.push_back (token);
    }

    res.push_back (s.substr (pos_start));

    return res;
}

std::wstring s2ws(const std::string& str)
{
    using convert_typeX = std::codecvt_utf8<wchar_t>;
    std::wstring_convert<convert_typeX, wchar_t> converterX;

    return converterX.from_bytes(str);
}

std::string ws2s(const std::wstring& wstr)
{
    using convert_typeX = std::codecvt_utf8<wchar_t>;
    std::wstring_convert<convert_typeX, wchar_t> converterX;

    return converterX.to_bytes(wstr);
}

std::string& ltrim(std::string& str, const std::string& chars)
{
    str.erase(0, str.find_first_not_of(chars));
    return str;
}
 
std::string& rtrim(std::string& str, const std::string& chars)
{
    str.erase(str.find_last_not_of(chars) + 1);
    return str;
}

std::string& trim(std::string& str, const std::string& chars)
{
    return ltrim(rtrim(str, chars), chars);
}

bool StartsWith(std::wstring& str, std::wstring prefix)
{
  bool fRet = false;

  if (str.rfind(prefix, 0) == 0)
  {
    fRet = true;
  }

  return fRet;
}

void removeDuplicates(std::string& str, const char& ch)
{
  auto new_end = std::unique(str.begin(), str.end(), 
    [ch](char lhs, char rhs) {
      return (lhs == rhs) && (lhs == ch);
    });

  str.erase(new_end, str.end());
}

//Replace part of a string with another string
auto replace(const std::string& str, const std::string& from, const std::string& to)
{
  std::string result = str;
  size_t start_pos = result.find(from);
  if(start_pos != std::string::npos)
    result.replace(start_pos, from.length(), to);
  return result;
}


auto parseUrl(const std::string& url)
{
  char port[32] = { '\0' };
  char hostname[256] = { '\0' };
  char username[128] = { '\0' };
  char password[128] = { '\0' };
  char protocol[32] = { '\0' };
  char directory[256] = { '\0' };

  // ftps://nmam:welcome123@127.0.0.1:21/a/b/c
  sscanf_s(url.c_str(), "%32[^:]://%128[^:]:%128[^@]@%256[^:]:%32[^/]/%256[^\n]",
      protocol, 32, username, 128, password, 128, hostname, 256, port, 32, directory, 256);

  return std::make_tuple(
    std::string(protocol),
    std::string(username),
    std::string(password),
    std::string(hostname),
    std::atoi(port),
    std::string(directory));
}

} // namespace

#endif