#ifndef FS_HPP
#define FS_HPP

#include <windows.h>
#include <virtdisk.h>

#include <string>

namespace osl {

class DllHelper
{
  public:

    DllHelper(const std::string& dll)
    {
      hDll = LoadLibraryA(dll.c_str());
    }

    ~DllHelper()
    {
      FreeLibrary(hDll);
    }

    auto operator[](const std::string& proc) const 
    {
      return GetProcAddress(hDll, proc.c_str());
    }

  private:

    HMODULE hDll;
};

auto GetFileHandle(const std::wstring& file)
{
  return CreateFileW(
    file.c_str(),
    GENERIC_READ|GENERIC_WRITE,
    FILE_SHARE_READ|FILE_SHARE_WRITE,
    NULL,
    OPEN_EXISTING,
    FILE_ATTRIBUTE_NORMAL,
    NULL);
}

auto GetFileHandle(const std::string& file)
{
  return CreateFileA(
    file.c_str(),
    GENERIC_READ|GENERIC_WRITE,
    FILE_SHARE_READ|FILE_SHARE_WRITE,
    NULL,
    OPEN_EXISTING,
    FILE_ATTRIBUTE_NORMAL,
    NULL);
}

auto OpenVirtualDisk(const std::wstring& file)
{
  DWORD fRet;
  HANDLE hvhd = INVALID_HANDLE_VALUE;
  OPEN_VIRTUAL_DISK_PARAMETERS params = { 0 };
  params.Version = OPEN_VIRTUAL_DISK_VERSION_3;

  VIRTUAL_STORAGE_TYPE vst = {
    VIRTUAL_STORAGE_TYPE_DEVICE_UNKNOWN,
    { 0xEC984AEC, 0xA0F9, 0x47e9, { 0x90, 0x1F, 0x71, 0x41, 0x5A, 0x66, 0x34, 0x5B } }
  };

  DllHelper virtDiskAPI("virtdisk.dll");

  auto pfnOpenVirtualDisk = (decltype(::OpenVirtualDisk) *) virtDiskAPI["OpenVirtualDisk"];

  if (pfnOpenVirtualDisk == NULL)
  {
    LOG << "failed to get poinetr to OpenVirtualDisk " << GetLastError();
    return hvhd;
  }

  fRet = pfnOpenVirtualDisk(
            &vst,
            file.c_str(),
            (VIRTUAL_DISK_ACCESS_MASK) 0,
            OPEN_VIRTUAL_DISK_FLAG_NONE,
            &params,
            &hvhd);

  if (fRet != ERROR_SUCCESS)
  {
    LOG << "OpenVirtualDisk failed " << fRet;
  }

  return hvhd;
}

auto AttachVHD(const std::wstring& source)
{
  HANDLE hvhd = OpenVirtualDisk(source);

  ATTACH_VIRTUAL_DISK_PARAMETERS params = { 0 };
  params.Version = ATTACH_VIRTUAL_DISK_VERSION_1;

  DllHelper virtDiskAPI("virtdisk.dll");

  auto pfn = (decltype(AttachVirtualDisk) *) virtDiskAPI["AttachVirtualDisk"];

  if (pfn == NULL)
  {
    LOG << "Failed to get poinetr to AttachVirtualDisk " << GetLastError();
    return INVALID_HANDLE_VALUE;
  }

  auto fRet = pfn(
      hvhd,
      NULL,
      ATTACH_VIRTUAL_DISK_FLAG_READ_ONLY|ATTACH_VIRTUAL_DISK_FLAG_NO_DRIVE_LETTER,
      0,
      &params,
      NULL);

  if (fRet != ERROR_SUCCESS)
  {
    LOG << "AttachVirtualDisk failed, error : " << fRet;
    return INVALID_HANDLE_VALUE;
  }

  return hvhd;
}

auto GetPhysicalDiskPath(HANDLE hvhd)
{
  wchar_t buf[128] = { L'\0' };
  ULONG bufSize = sizeof(buf);

  DllHelper virtDiskAPI("virtdisk.dll");

  auto pfn = (decltype(GetVirtualDiskPhysicalPath) *) virtDiskAPI["GetVirtualDiskPhysicalPath"];

  if (pfn == NULL)
  {
    LOG << "Failed to get poinetr to GetVirtualDiskPhysicalPath " << GetLastError();
    return std::string();
  }

  auto fRet = pfn(hvhd, &bufSize, buf);

  if (fRet != ERROR_SUCCESS)
  {
    LOG << "GetVirtualDiskPhysicalPath failed, error : " << fRet;
    return std::string();
  }

  char phyDiskPath[128] = { '\0' };
  wchar_t *wc = buf;

  while (*wc)
  {
    phyDiskPath[strlen(phyDiskPath)] = *((char *)wc); 
    wc++;
  }

  return std::string(phyDiskPath);
}

PVOLUME_BITMAP_BUFFER GetVolumeInUseBitmap(HANDLE hvolume)
{
  STARTING_LCN_INPUT_BUFFER startLCN;
  PVOLUME_BITMAP_BUFFER bitmap = NULL;
  DWORD dwAllocatedSize = 64 * 1024;
  DWORD BytesReturned = 0;

  startLCN.StartingLcn.QuadPart = 0;

  for (;;)
  {
    bitmap = (VOLUME_BITMAP_BUFFER *) LocalAlloc(LMEM_FIXED, dwAllocatedSize);

    BOOL fRet = DeviceIoControl(
                  hvolume, 
                  FSCTL_GET_VOLUME_BITMAP, 
                  &startLCN,
                  sizeof(startLCN),
                  bitmap, 
                  dwAllocatedSize, 
                  &BytesReturned, 
                  NULL);

    if (fRet)
    {
      // //DumpData("bitmap", bitmap->Buffer, (bitmap->BitmapSize.QuadPart)/8 + ( ((bitmap->BitmapSize.QuadPart)%8) ? 1 : 0 ));
      return bitmap;
    }
    else if (GetLastError() != ERROR_MORE_DATA)
    {
      LOG << "FSCTL_GET_VOLUME_BITMAP failed, error : " << GetLastError();
      return NULL;
    }

    LocalFree(bitmap);
    dwAllocatedSize *= 2;
  }
}

auto GetVolumeMetadata(const std::wstring& volume)
{
  DWORD d1,d2,d3;
  std::wstring name = volume;
  wchar_t b1[128] = {L'\0'};
  wchar_t b2[128] = {L'\0'};

  GetVolumeInformationW(
    (name.back() == L'\\') ? 
        name.c_str() : (name + L"\\").c_str(),
    b1, 128, &d1, &d2, &d3, b2, 128);

  return std::make_tuple(std::wstring(b1), std::wstring(b2), d1);
}

auto AllowExtendedDasdIO(HANDLE hDevice) -> bool
{
  if (!DeviceIoControl(
            hDevice,
            FSCTL_ALLOW_EXTENDED_DASD_IO,
            nullptr,
            0,
            nullptr,
            0,
            nullptr,
            nullptr)) {
    LOG << "FSCTL_ALLOW_EXTENDED_DASD_IO failed, error : " << GetLastError();
    return false;
  }

  return true;
}

auto GetNTFSVolumeData(HANDLE hDevice)
{
  DWORD fRet, BytesReturned;
  NTFS_VOLUME_DATA_BUFFER nvdb = { 0 };

  if (!AllowExtendedDasdIO(hDevice))
  {
    LOG << "AllowExtendedDasdIO failed, error : " << GetLastError();
    return nvdb;
  }

  fRet = DeviceIoControl(
            hDevice,
            FSCTL_GET_NTFS_VOLUME_DATA,
            nullptr,
            0,
            &nvdb,
            sizeof (NTFS_VOLUME_DATA_BUFFER),
            &BytesReturned,
            nullptr);

  if (!fRet) 
  {
    LOG << "FSCTL_GET_NTFS_VOLUME_DATA failed, error : " << GetLastError();
    return nvdb;
  }

  return nvdb;
}

auto GetPartitionInformation(const std::wstring& disk)
{
  DWORD nReturned;
  PARTITION_INFORMATION_EX  pie = { 0 };

  auto h = GetFileHandle(disk);

  if (!DeviceIoControl(
          h,
          IOCTL_DISK_GET_PARTITION_INFO_EX,
          NULL,
          0,
          &pie,
          sizeof (PARTITION_INFORMATION_EX),
          &nReturned,
          NULL)) 
  {
    LOG << "IOCTL_DISK_GET_PARTITION_INFO_EX failed, error : " << GetLastError();
  }

  CloseHandle(h);

  return pie;
}

auto GetBlockDeviceLength(HANDLE hVolume)
{
  DWORD nReturned;
  GET_LENGTH_INFORMATION  gli = { 0 };

  if (!DeviceIoControl(
          hVolume,
          IOCTL_DISK_GET_LENGTH_INFO,
          NULL,
          0,
          &gli,
          sizeof (GET_LENGTH_INFORMATION),
          &nReturned,
          NULL)) 
  {
    LOG << "IOCTL_DISK_GET_LENGTH_INFO failed, error : " << GetLastError();
    return 0ll;
  }

  return gli.Length.QuadPart;
}

auto GetVolumeHandle(const std::string& name)
{
  char _guid[128] = { 0 };

  auto fRet = GetVolumeNameForVolumeMountPointA(
    (name.back() == '\\') ? 
        name.c_str() : (name + "\\").c_str(), 
    _guid, 
    sizeof(_guid));

  if (fRet)
  {
    _guid[strlen(_guid) - 1] = '\0';
    return GetFileHandle(_guid);
  }

  return INVALID_HANDLE_VALUE;
}

auto GetVolumeHandle(const std::wstring& name)
{
  wchar_t _guid[128] = { 0 };

  if (name.find(L"HarddiskVolumeShadowCopy") != std::string::npos)
  {
    return GetFileHandle(name);
  }
  else
  {
    auto fRet = GetVolumeNameForVolumeMountPointW(
                    (name.back() == L'\\') ?
                        name.c_str() : (name + L"\\").c_str(),
                    _guid,
                    sizeof(_guid));

    if (fRet)
    {
      _guid[wcslen(_guid) - 1] = L'\0';
      return GetFileHandle(_guid);
    }
  }

  return INVALID_HANDLE_VALUE;
}

auto GetVolumeDiskExtents(const std::wstring& volume)
{
  std::vector<int> disks;

  HANDLE hSource = GetVolumeHandle(volume);

  if (hSource == INVALID_HANDLE_VALUE)
  {
    LOG << "Failed to open source volume, error : " << GetLastError();
    return disks;
  }

  VOLUME_DISK_EXTENTS volumeDiskExtents;
  DWORD dwBytesReturned = 0;

  BOOL fRet = DeviceIoControl(
                hSource,
                IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS,
                NULL,
                0,
                &volumeDiskExtents,
                sizeof(volumeDiskExtents),
                &dwBytesReturned,
                NULL);

  CloseHandle(hSource);

  if (fRet == FALSE)
  {
    LOG << "IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS failed on source, error : " << GetLastError();
    return disks;
  }

  for (DWORD i = 0; i < volumeDiskExtents.NumberOfDiskExtents; i++)
  {
    PDISK_EXTENT extent = &volumeDiskExtents.Extents[i];

    disks.push_back(extent->DiskNumber);
  }

  return disks;
}

template<typename T>
auto GetTotalAndFree(const T& volume)
{
  auto h = osl::GetVolumeHandle(volume);

  auto l = osl::GetBlockDeviceLength(h);

  auto nvdb = osl::GetNTFSVolumeData(h);

  CloseHandle(h);

  uint64_t size = nvdb.TotalClusters.QuadPart * nvdb.BytesPerCluster;
  uint64_t free = nvdb.FreeClusters.QuadPart * nvdb.BytesPerCluster;

  return std::make_pair(size, free);
}

auto EnumerateVolumes(void)
{
  wchar_t _guid[128];
  wchar_t _buf[MAX_PATH];
  DWORD nReturned = 0;
  BOOL fRet = TRUE;

  std::vector<std::vector<std::wstring>> out;

  HANDLE hFind = FindFirstVolumeW(_guid, sizeof(_guid) / sizeof(wchar_t));

  if (hFind == INVALID_HANDLE_VALUE)
  {
    LOG << "FindFirstVolume failed, error " << GetLastError();
    return out;
  }

  do
  {
    std::vector<std::wstring> names = { _guid };

    fRet = GetVolumePathNamesForVolumeNameW(
      _guid,
      _buf,
      MAX_PATH,
      &nReturned);

    if (!fRet)
    {
      LOG << "GetVolumePathNamesForVolumeName failed, error " << GetLastError();
    }

    wchar_t *path = _buf;

    while (*path)
    {
      names.push_back(path);
      path += wcslen(path) + 1;
    }

    out.push_back(names);

    fRet = FindNextVolumeW(hFind, _guid, sizeof(_guid) / sizeof(wchar_t));

    if (!fRet)
    {
      if (GetLastError() != ERROR_NO_MORE_FILES) 
      {
        LOG << "FindNextVolumeA failed, error : " << GetLastError();
      }
    }

  } while(fRet);

  FindVolumeClose(hFind);

  return out;
}

auto GetVolumeList(void)
{
  auto volumes = EnumerateVolumes();

  for(const auto& names : volumes)
  {
    std::wstring paths;

    for(auto i = 1; i < names.size(); i++)
    {
      paths += names[i] + L" ";
    }

    auto h = GetVolumeHandle(names[0]);

    auto length = GetBlockDeviceLength(h);

    auto nvdb = GetNTFSVolumeData(h);

    CloseHandle(h);
  }
}

auto UnlockVolume(HANDLE hTarget)
{
  BOOL fRet = DeviceIoControl(
          hTarget,
          FSCTL_UNLOCK_VOLUME,
          NULL,
          0,
          NULL,
          0,
          NULL,
          NULL);

  if (fRet == FALSE)
  {
    LOG << "FSCTL_UNLOCK_VOLUME failed, error " << GetLastError();
  }

  CloseHandle(hTarget);

  return fRet;
}

auto LockAndDismountVolume(HANDLE hTarget)
{
  BOOL fRet = DeviceIoControl(
            hTarget,
            FSCTL_LOCK_VOLUME,
            NULL,
            0,
            NULL,
            0,
            NULL,
            NULL);

  if (fRet == FALSE)
  {
    LOG << "Failed to lock target, error " << GetLastError();
    return FALSE;
  }

  fRet = DeviceIoControl(
            hTarget,
            FSCTL_DISMOUNT_VOLUME,
            NULL,
            0,
            NULL,
            0,
            NULL,
            NULL);

  if (fRet == FALSE)
  {
    LOG << "Failed to dismount target, error " << GetLastError();
    return FALSE;
  }

  if (!osl::AllowExtendedDasdIO(hTarget))
  {
    LOG << "AllowExtendedDasdIO failed, error : " << GetLastError();
    return FALSE;
  }

  return fRet;
}

} //namepsace osl::storage

#endif