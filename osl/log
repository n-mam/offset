#ifndef LOG_HPP
#define LOG_HPP

#include <iostream>
#include <sstream>
#include <functional>
#include <type_traits>

namespace osl {

template<typename T>
using TLogCallback = std::function<void (int, const T&)>;

class Log
{
  template<typename T>
  friend Log&& operator <<(Log&& lhs, const T& rhs);

  inline static TLogCallback<std::string> a_sink = nullptr;
  inline static TLogCallback<std::wstring> w_sink = nullptr;

  int m_level = Info;
  std::stringstream a_ss;
  std::wstringstream w_ss;

  public:

  Log()
  {
  }

  Log(int level)
  {
    m_level = level;
  }

  ~Log()
  {
    if (a_sink && a_ss.str().size())
    {
      a_sink(m_level, a_ss.str());
    }
    if (w_sink && w_ss.str().size())
    {
      w_sink(m_level, w_ss.str());
    }
  }

  enum {
    Info,
    Debug,
    Error,
    Status,
    Warning
  };

  template<typename T>
  static void SetLogSink(TLogCallback<T> cbk)
  {
    if constexpr(std::is_same<T, std::string>::value)
    {
      a_sink = cbk;
    }

    if constexpr(std::is_same<T, std::wstring>::value)
    {
      w_sink = cbk;
    }
  }
};

template<typename T>
Log&& operator <<(Log&& lhs, const T& rhs)
{
  if constexpr(std::is_convertible_v<T, const std::string&>)
  {
    lhs.a_ss << rhs;
  }
  else if constexpr(std::is_convertible_v<T, const std::wstring&>)
  {
    lhs.w_ss << rhs;
  }
  else if (lhs.a_ss.str().size())
  {
    lhs.a_ss << rhs;
  }
  else
  {
    lhs.w_ss << rhs;
  }

  return std::move(lhs);
}

}

#define LOG osl::Log()

#define ERR osl::Log(osl::Log::Error)

#define DBG osl::Log(osl::Log::Debug)

#define STATUS osl::Log(osl::Log::Status)

#endif