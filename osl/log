#ifndef LOG_HPP
#define LOG_HPP

#include <iostream>
#include <sstream>
#include <functional>
#include <type_traits>

// #define _AMD64_
// #include <debugapi.h>

namespace osl {

template<typename T>
using TLogCallback = std::function<void (int, int, const T&)>;

class log
{
  template<typename T>
  friend log&& operator <<(log&& lhs, const T& rhs);

  inline static TLogCallback<std::string> a_sink = nullptr;
  inline static TLogCallback<std::wstring> w_sink = nullptr;

  int m_key = 0;
  int m_level = info;
  std::stringstream a_ss;
  std::wstringstream w_ss;

  public:

  log()
  {
  }

  log(int level, int key = 0)
  {
    m_key = key;
    m_level = level;
  }

  ~log()
  {
    if (a_sink && a_ss.str().size())
    {
      a_sink(m_level, m_key, a_ss.str());
      //OutputDebugStringA(a_ss.str().c_str());
    }
    if (w_sink && w_ss.str().size())
    {
      w_sink(m_level, m_key, w_ss.str());
      //OutputDebugStringW(w_ss.str().c_str());
    }
  }

  enum {
    info,
    debug,
    error,
    status,
    warning
  };

  template<typename T>
  static void SetLogSink(TLogCallback<T> cbk)
  {
    if constexpr(std::is_same<T, std::string>::value)
    {
      a_sink = cbk;
    }

    if constexpr(std::is_same<T, std::wstring>::value)
    {
      w_sink = cbk;
    }
  }
};

template<typename T>
log&& operator <<(log&& lhs, const T& rhs)
{
  if constexpr(std::is_convertible_v<T, const std::string&>)
  {
    lhs.a_ss << rhs;
  }
  else if constexpr(std::is_convertible_v<T, const std::wstring&>)
  {
    lhs.w_ss << rhs;
  }
  else if (lhs.a_ss.str().size())
  {
    lhs.a_ss << rhs;
  }
  else
  {
    lhs.w_ss << rhs;
  }

  return std::move(lhs);
}

}

#define LOG osl::log()

#define ERR osl::log(osl::log::error)

#define DBG osl::log(osl::log::debug)

#define STATUS(k) osl::log(osl::log::status, k)

#endif