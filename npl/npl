#ifndef NPL_HPP
#define NPL_HPP

#include <observer/dispatcher>
#include <device/socket>
#include <protocol/ftp>
#include <protocol/websocket>

namespace npl {

SPDispatcher D = nullptr;

auto make_dispatcher(void)
{
  D = std::make_shared<Dispatcher>();
  D->InitializeControl();
  return D;
}

auto make_ftp(const std::string& host, int port, TLS ftps = TLS::No)
{
  auto cc = std::make_shared<SocketDevice>("ftp-cc");
  auto ftp = std::make_shared<ProtocolFTP>("ftp-protocol");    

  cc->SetHostAndPort(host, port);

  cc->SetTLS(ftps);

  D->AddEventListener(cc)->AddEventListener(ftp);

  return ftp;
}

auto make_ws_server(const std::string& host, int port, TLS tls = TLS::No, TOnClientMessageCbk cbk = nullptr)
{
  auto cc = std::make_shared<SocketDevice>("ws-cc");
  auto ls = std::make_shared<ProtocolWS>("ws-ls");

  cc->SetTLS(tls);

  cc->SetHostAndPort(host, port);

  ls->SetClientMessageCallback(cbk);

  D->AddEventListener(cc)->AddEventListener(ls);

  return ls;
}

auto make_http_client(const std::string& host, int port)
{
  auto sock = std::make_shared<SocketDevice>("http-socket");
  auto http = std::make_shared<ProtocolHTTP>("http-protocol");    

  sock->SetHostAndPort(host, port);

  D->AddEventListener(sock)->AddEventListener(http);

  return http;
}

template <typename T>
auto make_file(const T& file, bool create = false)
{
  auto device = std::make_shared<FileDevice>(file, create);

  if (device->IsConnected())
  {
    D->AddEventListener(device);
  }
  else
  {
    device.reset();
  }

  return device;
}

void TEST_DISPATCHER()
{
  for (int i = 0; i < 100; i++)
  {
    auto D = std::make_unique<Dispatcher>();
  }

  for (int i = 0; i < 100; i++)
  {
    auto D = std::make_shared<Dispatcher>();
  }

  for (int i = 0; i < 100; i++)
  {
    auto D = new Dispatcher();

    delete D;
  }

  auto D1 = std::make_unique<Dispatcher>();
  auto D2 = std::make_unique<Dispatcher>();
}

} //namespace npl

#endif