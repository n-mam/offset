#ifndef FTP_HPP
#define FTP_HPP

#include <list>
#include <tuple>
#include <mutex>
#include <atomic>
#include <vector>
#include <string>
#include <sstream>
#include <cstring>
#include <functional>

#include <observer/listener>
#include <protocol/protocol>

namespace npl {

class FTPMessage : public Message
{
  public:

  FTPMessage(const std::vector<uint8_t>& m) : Message(m) {}
};

class ftp : public protocol<uint8_t, uint8_t>
{
  public:

  using TStateFn = std::function<void (void)>;

  enum : uint8_t
  {
    EStateInit = EStateConnected,
    EStateFTPS,
    EStateTLS,
    EStateADAT,
    EStateAUTH,
    EStateUSER,
    EStatePASS,
    EStateACCT,
    EStatePASV,
    EStateDATA,
    EStateREADY,
    EState1YZ,
    EStateXYZ,
    EStateGEN
  };

  enum Direction : uint8_t {
    none,
    list,
    upload,
    download
  };

  ftp(const std::string& name) : protocol(name) {}

  virtual ~ftp() {}

  std::mutex mux;
  std::condition_variable cv;
  bool uploadChannelReady = false;

  virtual int32_t WriteSync(const uint8_t *b = nullptr, size_t l = 0, uint64_t o = 0) override
  {
    std::unique_lock<std::mutex> ul(mux);
    cv.wait(ul, [&](){ return uploadChannelReady; });

    bool fRet = false;
 
    if (iDataChannel)
    {
      uploadChannelReady = false;

      if (b && l)
      {
        fRet = iDataChannel->Write(b, l);
      }
      else
      {
        std::dynamic_pointer_cast<socket_device>(iDataChannel)->StopSocket();
      }
    }

    return fRet ? (int32_t)l : 0;
  }

  virtual bool Write(const uint8_t *b = nullptr, size_t l = 0, uint64_t o = 0) override
  {
    return iDataChannel->Write(b, l);
  }

  virtual void Transfer(Direction direction, const std::string& remote, TTransferCbk tcbk, TResponseCbk rcbk = nullptr, tls P = tls::no)
  {
    std::lock_guard<std::mutex> lg(iQLock);

    if (remote.empty() || !tcbk) assert(false);

    bool bQWasEmpty = iCmdQ.empty();

    SetDCProtLevel(P);

    std::string command;

    if (direction == ftp::list) {
      HasFeature("MLSD") ?
        command = "MLSD" : command = "LIST";
    } else if (direction == ftp::upload) {
      command = "STOR";
    } else if (direction == ftp::download) {
      command = "RETR";
    }

    iCmdQ.push_back({"TYPE", "I"});
    iCmdQ.push_back({"PASV"});
    iCmdQ.push_back({command.c_str(), remote, rcbk, tcbk});

    m_pending_transfers++;

    CheckQueue(bQWasEmpty);
  }

  virtual void GetCurrentDirectory(TResponseCbk cbk = nullptr)
  {
    std::lock_guard<std::mutex> lg(iQLock);
    bool bQWasEmpty = iCmdQ.empty();
    iCmdQ.push_back({"PWD", "", cbk, nullptr});
    CheckQueue(bQWasEmpty);
  }

  virtual void SetCurrentDirectory(const std::string& dir, TResponseCbk cbk = nullptr)
  {
    std::lock_guard<std::mutex> lg(iQLock);
    bool bQWasEmpty = iCmdQ.empty();
    iCmdQ.push_back({"CWD", dir, cbk, nullptr});
    CheckQueue(bQWasEmpty);
  }

  virtual void CreateDirectory(const std::string& dir, TResponseCbk cbk = nullptr)
  {
    std::lock_guard<std::mutex> lg(iQLock);
    bool bQWasEmpty = iCmdQ.empty();
    iCmdQ.push_back({"MKD", dir, cbk, nullptr});
    CheckQueue(bQWasEmpty);
  }

  virtual void RemoveDirectory(const std::string& dir, TResponseCbk cbk = nullptr)
  {
    std::lock_guard<std::mutex> lg(iQLock);
    bool bQWasEmpty = iCmdQ.empty();
    iCmdQ.push_back({"RMD", dir, cbk, nullptr});
    CheckQueue(bQWasEmpty);
  }

  virtual void RemoveFile(const std::string& file, TResponseCbk cbk = nullptr)
  {
    std::lock_guard<std::mutex> lg(iQLock);
    bool bQWasEmpty = iCmdQ.empty();
    iCmdQ.push_back({"DELE", file, cbk, nullptr});
    CheckQueue(bQWasEmpty);
  }

  virtual void Rename(const std::string& from, const std::string& to, TResponseCbk cbk = nullptr)
  {
    std::lock_guard<std::mutex> lg(iQLock);
    bool bQWasEmpty = iCmdQ.empty();
    iCmdQ.push_back({"RNFR", from, cbk, nullptr});
    iCmdQ.push_back({"RNTO", to, cbk, nullptr});
    CheckQueue(bQWasEmpty);
  }

  virtual void Quit(TResponseCbk cbk = nullptr)
  {
    std::lock_guard<std::mutex> lg(iQLock);
    bool bQWasEmpty = iCmdQ.empty();
    iCmdQ.push_back({"QUIT", "", cbk, nullptr});
    CheckQueue(bQWasEmpty);
  }

  virtual bool HasFeature(const std::string& feature)
  {
    return m_feat.find(feature) != std::string::npos;
  }

  virtual std::string SystemType(void)
  {
    return m_syst;
  }

  virtual int PendingTransfers(void)
  {
    return m_pending_transfers;
  }

  protected:

  std::string m_feat;

  std::string m_syst;

  tls iDCProt = tls::no;

  SPSubject iDataChannel = nullptr;

  int m_pending_transfers = 0;

  struct Command
  {
    std::string m_name;
    std::string m_remote = "";
    TResponseCbk m_rcbk = nullptr;
    TTransferCbk m_tcbk = nullptr;
  };

  struct Transition
  {
    uint8_t  iState;
    char     iResponseCode;
    uint8_t  iNextState;
    TStateFn iTransitionFn;
    uint8_t  iFlags = 0x00;
  };

  std::mutex iQLock;

  std::list<Command> iCmdQ;

  #define NEXT 0x10

  Transition FSM[31] =
  {
    // Connection states
    { EStateInit , '1', EStateInit  , nullptr                                            },
    { EStateInit , '2', EStateFTPS  , [this] () { CheckExplicitFTPS();                   }, NEXT    },
    { EStateInit , '4', EStateInit  , nullptr                                            },
    // AUTH TLS states
    { EStateAUTH , '2', EStateTLS   , [this] () { DoCCHandshake();                       },     1   },
    { EStateAUTH , '3', EStateADAT  , nullptr                                             ,     1   },
    { EStateAUTH , '4', EStateUSER  , [this] () { iCmdQ.push_front({"USER", iUserName}); }, NEXT|1  },
    { EStateAUTH , '5', EStateUSER  , [this] () { iCmdQ.push_front({"USER", iUserName}); }, NEXT|1  },
    // USER states
    { EStateUSER , '1', EStateUSER  , nullptr                                            },
    { EStateUSER , '2', EStateUSER  , nullptr                                            },
    { EStateUSER , '3', EStatePASS  , [this] () { iCmdQ.push_front({"PASS", iPassword}); }, NEXT|1  },
    { EStateUSER , '4', EStateUSER  , nullptr                                            },
    { EStateUSER , '5', EStateUSER  , nullptr                                            },
    // PASS states
    { EStatePASS , '1', EStateUSER  , [this] () { ProcessLoginEvent(false);              },         },
    { EStatePASS , '2', EStateREADY , [this] () { ProcessLoginEvent(true);               }, NEXT|1  },
    { EStatePASS , '3', EStateACCT  , [this] () { iCmdQ.push_back({"ACCT"});             },         },
    { EStatePASS , '4', EStateUSER  , [this] () { ProcessLoginEvent(false);              },         },
    { EStatePASS , '5', EStateUSER  , [this] () { ProcessLoginEvent(false);              },         },
    // PASV states
    { EStatePASV , '1', EStateREADY , nullptr                                             , NEXT|2   },
    { EStatePASV , '2', EStateDATA  , [this] () { ProcessPasvResponse();                 }, NEXT|1   },
    { EStatePASV , '4', EStateREADY , nullptr                                             , NEXT|2   },
    { EStatePASV , '5', EStateREADY , nullptr                                             , NEXT|2   },
    // DATA command (LIST, RETR, STOR) states
    { EStateDATA , '1', EState1YZ   , [this] () { ProcessDataCmdResponse('1');           }           },
    { EState1YZ  , '2', EStateXYZ   , [this] () { ProcessDataCmdResponse('2');           }           },
    { EState1YZ  , '4', EStateXYZ   , [this] () { ProcessDataCmdResponse('4');           }           },      
    { EStateDATA , '4', EStateXYZ   , [this] () { ProcessDataCmdResponse('4');           }           },
    { EStateDATA , '5', EStateXYZ   , [this] () { ProcessDataCmdResponse('5');           }           },
    { EStateGEN  , '1', EStateREADY , nullptr                                             , NEXT|1   },
    { EStateGEN  , '2', EStateREADY , nullptr                                             , NEXT|1   },
    { EStateGEN  , '3', EStateREADY , nullptr                                             , NEXT|1   },
    { EStateGEN  , '4', EStateREADY , nullptr                                             , NEXT|1   },
    { EStateGEN  , '5', EStateREADY , nullptr                                             , NEXT|1   }
  };

  virtual void StateMachine(SPMessage msg) override
  {
    std::lock_guard<std::mutex> lg(iQLock);

    auto l = msg->GetPayloadLength();
    auto b = msg->GetPayloadBuffer();

    LOG << "Response : " << std::string(b, l);

    for (int i = 0; i < sizeof(FSM) / sizeof(FSM[0]); i++)
    {
      Transition t = FSM[i];

      if ((t.iState == iCurrentState) && (t.iResponseCode ==  b[0]))
      {
        // DBG << +t.iState << " -> " << +t.iNextState
        //   << ", " << +t.iFlags << ", " << iCmdQ.size();

        iCurrentState = t.iNextState;

        if (!iCmdQ.empty())
        {
          auto cbk = iCmdQ.front().m_rcbk;

          if (cbk)
          {
            cbk(msg->GetPayloadString());
          }

          uint8_t f_skip = t.iFlags & 0x0F;

          for (auto i = 0; i < f_skip; i++)
          {
            iCmdQ.pop_front();
          }
        }

        if (t.iTransitionFn)
        {
          t.iTransitionFn();
        }

        auto next = (t.iFlags >> 4) & 0x0F;

        if (next)
        {
          TriggerNextCommand();
        }

        break;
      }
    }
  }

  virtual SPMessage IsMessageComplete(const std::vector<uint8_t>& b) override
  {
    size_t l = b.size();

    if (l >= 4)
    {
      if ((b[l-2] == '\r') && (b[l-1] == '\n'))
      {
        uint8_t code[4] = { 0, 0, 0, ' '};

        memmove(code, b.data(), 3);

        for (size_t i = 0; i < l; i++)
        {
          if (0 == memcmp(b.data() + i, code, 4))
          {
            return std::make_shared<FTPMessage>(b);
          }
        }
      }
    }

    return nullptr;
  }

  virtual void SendCommand(const std::string& c, const std::string& arg = "")
  {
    auto cmd = c + " " + arg + "\r\n";

    LOG << "Command  : " << cmd;

    auto target = m_target.lock();

    if (target)
    {
      target->Write((uint8_t *)cmd.c_str(), cmd.size(), 0);
    }
  }

  virtual void SetDCProtLevel(tls P)
  {
    auto tls = GetChannelTLS(m_target.lock());

    if (tls == tls::yes || tls == tls::implicit)
    {
      iCmdQ.push_back({"PBSZ", "0"});

      auto level = (P == tls::no) ? "C" : "P";

      iCmdQ.push_back({"PROT", level,
        [this, P](const std::string& res){
          if (res[0] == '2')
          {
            iDCProt = P;
          }
        }, nullptr});
    }
  }

  virtual void TriggerNextCommand(void)
  {
    if (!iCmdQ.empty())
    {
      auto& cmd = iCmdQ.front();
      UpdateProtocolState(cmd.m_name);
      SendCommand(cmd.m_name, cmd.m_remote);
    }
  }

  virtual void UpdateProtocolState(const std::string& cmd)
  {
    if (cmd == "AUTH")
    {
      iCurrentState = EStateAUTH;
    }
    else if (cmd == "USER")
    {
      iCurrentState = EStateUSER;
    }
    else if (cmd == "PASS")
    {
      iCurrentState = EStatePASS;
    }
    else if (cmd == "PASV")
    {
      iCurrentState = EStatePASV;
    }
    else if (IsTransferCommand(cmd))
    {
      iCurrentState = EStateDATA;
    }
    else
    {
      iCurrentState = EStateGEN;
    }
  }

  virtual void CheckExplicitFTPS(void)
  {
    auto tls = GetChannelTLS(m_target.lock());

    if (tls == tls::yes)
    {
      iCmdQ.push_front({"AUTH", "TLS"});
    }
    else
    {
      iCmdQ.push_front({"USER", iUserName});
    }
  }

  auto GetTransferDirection(const std::string& cmd)
  {
    if (cmd == "LIST" || cmd == "MLSD") {
      return ftp::download;
    } else if (cmd == "RETR") {
      return ftp::download;
    } else if (cmd == "STOR") {
      return ftp::upload;
    } else {
      return ftp::none;
    }
  }

  virtual void ProcessDataCmdResponse(char code)
  {
    if (IsPositivePreliminaryReply(code))
    {
      if (iDCProt == tls::yes)
      {
        auto cc = std::dynamic_pointer_cast<socket_device>(m_target.lock());

        std::dynamic_pointer_cast<socket_device>
          (iDataChannel)->InitializeSSL(
            cc->GetSslObject(),
            [this] () {
              TriggerDataTransfer();
            });
      }
      else
      {
        TriggerDataTransfer();
      }
    }
    else if (IsPositiveCompletionReply(code))
    {
      if (!iDataChannel)
      {
        iCmdQ.pop_front();
        iCurrentState = EStateREADY;
        TriggerNextCommand();
      }
    }
    else
    {
      if (iDataChannel)
      {
        std::dynamic_pointer_cast<socket_device>(iDataChannel)->StopSocket();
        iDataChannel.reset();
      }

      auto cmd = iCmdQ.front().m_name;

      if (GetTransferDirection(cmd) == ftp::upload)
      {
        NotifyUploadChannelReady();
      }

      if (iCurrentState == EStateXYZ)
      {
        iCmdQ.pop_front();
        iCurrentState = EStateREADY;
        TriggerNextCommand();
      }
    }
  }

  virtual void ProcessPasvResponse(void)
  {
    auto& m = iMessages.back();

    auto& pasv = m->GetPayloadString();

    auto spec = pasv.substr(pasv.find('('));

    uint32_t h1, h2, h3, h4, p1, p2;

    int fRet = sscanf_s(spec.c_str(), "(%d,%d,%d,%d,%d,%d)", &h1, &h2, &h3, &h4, &p1, &p2);

    if (fRet < 6)
    {
      LOG << "Faled to parse PASV response";
    }

    auto host = std::to_string(h1) + "." +
                std::to_string(h2) + "." +
                std::to_string(h3) + "." +
                std::to_string(h4);

    auto port = (p1 << 8) + p2;

    OpenDataChannel(host, port);
  }

  virtual void OpenDataChannel(const std::string& host, int port)
  {
    iDataChannel = std::make_shared<socket_device>("sock-dc");

    GetDispatcher()->AddEventListener(iDataChannel);

    auto dc = std::dynamic_pointer_cast<socket_device>(iDataChannel);

    dc->SetHostAndPort(host, port);

    dc->StartSocketClient();
  }

  virtual void AttachDataChannelObserver(void)
  {
    auto observer = std::make_shared<Listener>(
      [this]() {
        OnDataChannelConnect();
      },
      [this](const uint8_t *b, size_t n) {
        if (!iDataChannel->IsStopped()) 
          OnDataChannelIoCompletion(b, n, ftp::download);
      },
      [this](const uint8_t *b, size_t n) {
        if (!iDataChannel->IsStopped()) 
          OnDataChannelIoCompletion(b, n, ftp::upload);
      },
      [this](){
        OnDataChannelDisconnect();
      });

    iDataChannel->AddEventListener(observer);
  }

  virtual void OnDataChannelConnect(void)
  {
  }

  virtual void OnDataChannelIoCompletion(const uint8_t *b, size_t n, Direction direction)
  {
    auto cmd = iCmdQ.front().m_name;

    if (direction == GetTransferDirection(cmd))
    {
      auto& transferCallback = iCmdQ.front().m_tcbk;

      if (transferCallback)
      {
        auto continueTransfer = transferCallback((const char *)b, n);

        if (!continueTransfer)
        {
          std::dynamic_pointer_cast<socket_device>(iDataChannel)->StopSocket(true);
        }

        if (direction == ftp::upload)
        {
          NotifyUploadChannelReady();
        }
      }
    }
  }

  virtual void OnDataChannelDisconnect(void)
  {
    m_pending_transfers--;

    auto& transferCallback = iCmdQ.front().m_tcbk;

    if (transferCallback)
    {
      transferCallback(nullptr, 0);
    }

    ProcessDataCmdResponse('0');
  }

  virtual void TriggerDataTransfer(void)
  {
    AttachDataChannelObserver();

    auto cmd = iCmdQ.front().m_name;

    if (GetTransferDirection(cmd) == ftp::upload)
    {
      if (iCmdQ.front().m_tcbk)
      {
        iCmdQ.front().m_tcbk(nullptr, 0);
      }
    }
  }

  virtual void NotifyUploadChannelReady()
  {
    std::lock_guard<std::mutex> lg(mux);          
    uploadChannelReady = true;
    cv.notify_all();
  }

  virtual void ProcessLoginEvent(bool success)
  {
    if (!success)
    {
      iCmdQ.clear();
      LOG << "User login failed";
      NotifyUploadChannelReady();
      if (iLoginCallback)
        iLoginCallback(false);
    }
    else
    {
      iCmdQ.push_front({"SYST", "", [this](auto res){
        m_syst = res;
      }});
      iCmdQ.push_front({"FEAT", "", [this](auto res){
        m_feat = res;
        if (iLoginCallback)
          iLoginCallback(true);
      }});
    }
  }

  virtual bool IsTransferCommand(const std::string& cmd)
  {
    return (cmd == "RETR" || 
            cmd == "LIST" ||
            cmd == "MLSD" ||
            cmd == "STOR");
  }

  virtual bool IsPositiveCompletionReply(char c)
  {
    return (c == '2');
  }

  virtual bool IsPositivePreliminaryReply(char c)
  {
    return (c == '1');
  }

  virtual void OnError(uint64_t error) override
  {
    STATUS(1) << "Control channel error " << error;
  }

  virtual void OnDisconnect(void) override
  {
    protocol::OnDisconnect();
  }

  virtual void OnConnect(void) override
  {
    protocol::OnConnect();

    auto tls = GetChannelTLS(m_target.lock());

    if (tls == tls::implicit)
    {
      DoCCHandshake();
    }
  }

  virtual void DoCCHandshake()
  {
    auto sock = GetTargetSocketDevice();

    if (sock)
    {
      sock->InitializeSSL(
        nullptr,
        [this]() {
          auto tls = GetChannelTLS(m_target.lock()); 
          if (tls == tls::yes)
          {
            iCmdQ.push_front({"USER", iUserName});
          }
          TriggerNextCommand();
        }
      );
    }
  }

  virtual void CheckQueue(bool bQWasEmpty)
  {
    if (bQWasEmpty && iCurrentState == EStateREADY)
    {
      TriggerNextCommand();
    }
  }
};

using SPProtocolFTP = std::shared_ptr<ftp>;

} //namespace npl

#endif //PROTOCOLFTP_HPP
