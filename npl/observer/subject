#ifndef SUBJECT_HPP
#define SUBJECT_HPP

#include <map>
#include <any>
#include <mutex>
#include <vector>
#include <memory>
#include <string>
#include <iostream>
#include <algorithm>

#include <osl/log>

namespace npl {

template <typename T1, typename T2>
class subject : public std::enable_shared_from_this<subject<T1, T2>>
{
  protected:

  using SPSubject = std::shared_ptr<subject<T1, T2>>;
  using WPSubject = std::weak_ptr<subject<T1, T2>>;

  std::mutex m_lock;

  WPSubject m_target;

  std::string m_name = "xxx";

  bool m_stopped = false;

  bool m_connected = false;

  bool m_removeAllListeners = false;

  bool m_removeSelfAsListener = false;

  std::vector<SPSubject> m_observers;

  std::map<std::string, std::string> m_properties;

  public:

  subject(){}

  subject(const std::string& name){ m_name = name; }

  virtual ~subject()
  {
    std::lock_guard<std::mutex> lg(m_lock);
    RemoveAllEventListenersInternal();
    DBG << "~subject : " << GetName();
  }

  virtual std::string GetName(void)
  {
    return m_name;
  }

  static SPSubject get_last_target(SPSubject s)
  {
    while (s && s->m_target.lock())
      s = s->m_target.lock();
    return s;
  }

  virtual void SetTarget(const WPSubject& target)
  {
    std::lock_guard<std::mutex> lg(m_lock);
    m_target = target;
  }

  virtual void * Read(const uint8_t *b = nullptr, size_t l = 0, uint64_t o = 0)
  {
    std::lock_guard<std::mutex> lg(m_lock);

    auto target = m_target.lock();

    if (target)
    {
      return target->Read(b, l, o);
    }

    return nullptr;
  }

  virtual bool Write(const uint8_t *b = nullptr, size_t l = 0, uint64_t o = 0)
  {
    std::lock_guard<std::mutex> lg(m_lock);

    auto target = m_target.lock();

    if (target)
    {
      return target->Write(b, l, o);
    }

    return false;
  }

  virtual int32_t ReadSync(const uint8_t *b = nullptr, size_t l = 0, uint64_t o = 0)
  {
    std::lock_guard<std::mutex> lg(m_lock);

    auto target = m_target.lock();

    if (target)
    {
      return target->ReadSync(b, l, o);
    }

    return -1;
  }

  virtual int32_t WriteSync(const uint8_t *b = nullptr, size_t l = 0, uint64_t o = 0)
  {
    std::lock_guard<std::mutex> lg(m_lock);

    auto target = m_target.lock();

    if (target)
    {
      return target->WriteSync(b, l, o);
    }

    return -1;
  }

  virtual void OnError(uint64_t error)
  {
    std::lock_guard<std::mutex> lg(m_lock);
    NotifyError(error);
  }

  virtual void OnAccept(void)
  {
    std::lock_guard<std::mutex> lg(m_lock);
    NotifyAccept();
  }

  virtual void OnConnect(void)
  {
    std::lock_guard<std::mutex> lg(m_lock);
    m_connected = true;
    NotifyConnect();
  }

  virtual void OnRead(const T1 *b, size_t n)
  {
    std::lock_guard<std::mutex> lg(m_lock);
    NotifyRead((const T2 *)b, n);
  }

  virtual void OnWrite(const T1 *b, size_t n)
  {
    std::lock_guard<std::mutex> lg(m_lock);
    NotifyWrite(b, n);
  }

  virtual void OnDisconnect(void)
  {
    std::lock_guard<std::mutex> lg(m_lock);
    m_connected = false;
    NotifyDisconnect();
    MarkRemoveAllListeners();
    MarkRemoveSelfAsListener();
  }

  virtual void OnEvent(std::any e)
  {
    std::lock_guard<std::mutex> lg(m_lock);
    NotifyEvent(e);
  }

  virtual const SPSubject& AddEventListener(const SPSubject& observer)
  {
    std::lock_guard<std::mutex> lg(m_lock);
    m_observers.push_back(observer);
    observer->SetTarget(this->weak_from_this());
    return observer;
  }

  virtual void RemoveEventListener(const SPSubject& observer)
  {
    std::lock_guard<std::mutex> lg(m_lock);
    RemoveEventListenerInternal(observer);
  }

  virtual void RemoveAllEventListeners(void)
  {
    std::lock_guard<std::mutex> lg(m_lock);
    RemoveAllEventListenersInternal();
  }

  virtual void MarkRemoveAllListeners(void)
  {
    m_removeAllListeners = true;
  }

  virtual void MarkRemoveSelfAsListener(void)
  {
    m_removeSelfAsListener = true;
  }

  virtual void MarkConnected(bool connected)
  {
    m_connected = connected;
  }

  virtual bool IsConnected(void)
  {
    return m_connected;
  }

  virtual void MarkStopped(bool stopped)
  {
    m_stopped = stopped;
  }

  virtual bool IsStopped(void)
  {
    return m_stopped;
  }

  virtual bool IsRemoveSelfAsListenerMarked(void)
  {
    return m_removeSelfAsListener;
  }

  virtual bool IsDispatcher(void)
  {
    return false;
  }

  virtual void add_subject(SPSubject subject)
  {

  }

  virtual void SetProperty(const std::string& key, const std::string& value)
  {
    std::lock_guard<std::mutex> lg(m_lock);
    m_properties[key] = value;
  }

  virtual std::string GetProperty(const std::string& key)
  {
    std::lock_guard<std::mutex> lg(m_lock);

    std::string value = "";

    try
    {
      value = m_properties.at(key);
    }
    catch(const std::exception& e)
    {
      DBG << e.what();
    }
    
    return value;
  }

  virtual int GetPropertyAsInt(const std::string& key)
  {
    auto value = GetProperty(key);
    return std::stoi(value);
  }

  virtual bool GetPropertyAsBool(const std::string& key)
  {
    auto value = GetProperty(key); 
    return ((value.size() && value == "true") ? true : false);
  }

  protected:

  virtual void ResetSubject(SPSubject& subject)
  {
    subject->MarkRemoveAllListeners();
    subject->MarkRemoveSelfAsListener();
    subject.reset();
  }

  virtual void ProcessListenersMarkedForRemoval(void)
  {
    if (this->m_removeAllListeners)
    {
      this->RemoveAllEventListenersInternal();        
    }

    for (auto ob = m_observers.begin(); ob != m_observers.end(); )
    {
      if ((*ob)->IsRemoveSelfAsListenerMarked())
      {
        ob = this->RemoveEventListenerInternal(*ob);
      }
      else
      {
        ob++;
      }
    }
  }

  virtual void RemoveAllEventListenersInternal()
  {
    m_observers.clear();
    m_removeAllListeners = false;      
  }

  auto RemoveEventListenerInternal(const SPSubject& consumer)
  {
    return m_observers.erase(
      std::remove(
        m_observers.begin(), m_observers.end(), consumer),
      m_observers.end()
    );
  }

  virtual void NotifyError(uint64_t error)
  {
    for (auto& observer : m_observers)
    {
      observer->OnError(error);
    }
    ProcessListenersMarkedForRemoval();
  }

  virtual void NotifyConnect()
  {
    for (auto& observer : m_observers)
    {
      observer->OnConnect();
    }
    ProcessListenersMarkedForRemoval();
  }

  virtual void NotifyRead(const T2 *b, size_t n)
  {
    for (auto& observer : m_observers)
    {
      observer->OnRead(b, n);
    }
    ProcessListenersMarkedForRemoval();
  }

  virtual void NotifyWrite(const T2 *b, size_t n)
  {
    for (auto& observer : m_observers)
    {
      observer->OnWrite(b, n);
    }
    ProcessListenersMarkedForRemoval();
  }

  virtual void NotifyDisconnect()
  {
    for (auto& observer : m_observers)
    {
      observer->OnDisconnect();
    }
    ProcessListenersMarkedForRemoval();
  }

  virtual void NotifyAccept(void)
  {
    for (auto& observer : m_observers)
    {
      observer->OnAccept();
    }
    ProcessListenersMarkedForRemoval();
  }

  virtual void NotifyEvent(std::any e)
  {
    for (auto& observer : m_observers)
    {
      observer->OnEvent(e);
    }
    ProcessListenersMarkedForRemoval();
  }
};

template <typename T1, typename T2>
using SPSubject = std::shared_ptr<subject<T1, T2>>;

template<typename T1, typename T2>
using WPSubject = std::weak_ptr<subject<T1, T2>>;

} // namespace npl

#endif //SUBJECT_HPP
