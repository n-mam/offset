#ifndef SUBJECT_HPP
#define SUBJECT_HPP

#include <any>
#include <set>
#include <mutex>
#include <vector>
#include <memory>
#include <string>
#include <assert.h>
#include <iostream>
#include <algorithm>
#include <unordered_map>

#include <osl/log>

namespace npl {

template <typename T1, typename T2>
struct subject : public std::enable_shared_from_this<subject<T1, T2>> {

    using WPSubject = std::weak_ptr<subject<T1, T2>>;
    using SPSubject = std::shared_ptr<subject<T1, T2>>;

    subject(){}

    subject(const std::string& name) {
        m_name = name;
    }

    virtual ~subject() {
        std::lock_guard<std::mutex> lg(m_lock);
        RemoveAllEventListenersInternal();
        DBG << "~subject : " << get_name();
    }

    virtual std::string get_name(void) {
        return m_name;
    }

    static SPSubject get_last_target(SPSubject s) {
        while (s) {
            auto t = s->m_target.lock();
            if (!t) break;
            s = t;
        }
        return s;
    }

    virtual void set_target(const WPSubject& target) {
        std::lock_guard<std::mutex> lg(m_lock);
        m_target = target;
    }

    virtual void * Read(const uint8_t *b = nullptr, size_t l = 0, uint64_t o = 0) {
        std::lock_guard<std::mutex> lg(m_lock);
        auto target = m_target.lock();
        if (target) {
            return target->Read(b, l, o);
        }
        return nullptr;
    }

    virtual bool Write(const uint8_t *b = nullptr, size_t l = 0, uint64_t o = 0) {
        std::lock_guard<std::mutex> lg(m_lock);
        auto target = m_target.lock();
        if (target) {
            return target->Write(b, l, o);
        }
        return false;
    }

    virtual int32_t ReadSync(const uint8_t *b = nullptr, size_t l = 0, uint64_t o = 0) {
        std::lock_guard<std::mutex> lg(m_lock);
        auto target = m_target.lock();
        if (target) {
            return target->ReadSync(b, l, o);
        }
        return -1;
    }

    virtual int32_t WriteSync(const uint8_t *b = nullptr, size_t l = 0, uint64_t o = 0) {
        std::lock_guard<std::mutex> lg(m_lock);
        auto target = m_target.lock();
        if (target) {
            return target->WriteSync(b, l, o);
        }
        return -1;
    }

    virtual void onRead(const T1 *b, size_t n) {
        std::lock_guard<std::mutex> lg(m_lock);
        NotifyRead((const T2 *)b, n);
    }

    virtual void onWrite(const T1 *b, size_t n) {
        std::lock_guard<std::mutex> lg(m_lock);
        NotifyWrite(b, n);
    }

    virtual void onError(uint64_t error) {
        std::lock_guard<std::mutex> lg(m_lock);
        NotifyError(error);
    }

    virtual void onAccept(void) {
        std::lock_guard<std::mutex> lg(m_lock);
        NotifyAccept();
    }

    virtual void onConnect(void) {
        std::lock_guard<std::mutex> lg(m_lock);
        m_connected = true;
        NotifyConnect();
    }

    virtual void onDisconnect(void) {
        std::lock_guard<std::mutex> lg(m_lock);
        m_connected = false;
        NotifyDisconnect();
        MarkRemoveAllListeners();
        MarkRemoveSelfAsListener();
    }

    virtual void onEvent(std::any e) {
        std::lock_guard<std::mutex> lg(m_lock);
        NotifyEvent(e);
    }

    virtual const SPSubject& AddEventListener(const SPSubject& observer) {
        std::lock_guard<std::mutex> lg(m_lock);
        m_observers.insert(observer);
        observer->set_target(this->weak_from_this());
        return observer;
    }

    virtual void RemoveEventListener(const SPSubject& observer) {
        std::lock_guard<std::mutex> lg(m_lock);
        RemoveEventListenerInternal(observer);
    }

    virtual void RemoveAllEventListeners(void) {
        std::lock_guard<std::mutex> lg(m_lock);
        RemoveAllEventListenersInternal();
    }

    virtual void MarkRemoveAllListeners(void) {
        m_removeAllListeners = true;
    }

    virtual void MarkRemoveSelfAsListener(void) {
        m_removeSelfAsListener = true;
    }

    virtual void MarkConnected(bool connected) {
        m_connected = connected;
    }

    virtual bool IsConnected(void) {
        return m_connected;
    }

    virtual void MarkStopped(bool stopped) {
        m_stopped = stopped;
    }

    virtual bool IsStopped(void) {
        return m_stopped;
    }

    virtual bool IsRemoveSelfAsListenerMarked(void) {
        return m_removeSelfAsListener;
    }

    virtual void add_subject(SPSubject subject) {}

    virtual void set_property(const std::string& key, const std::string& value) {
        std::lock_guard<std::mutex> lg(m_lock);
        m_properties[key] = value;
    }

    virtual std::string get_property(const std::string& key) {
        std::lock_guard<std::mutex> lg(m_lock);
        std::string value = "";
        try {
            value = m_properties.at(key);
        }
        catch (const std::exception& e) {
            DBG << e.what();
        }
        return value;
    }

    virtual int get_property_int(const std::string& key) {
        auto value = get_property(key);
        return std::stoi(value);
    }

    virtual bool get_property_bool(const std::string& key) {
        auto value = get_property(key);
        return ((value.size() && value == "true") ? true : false);
    }

    protected:

    std::mutex m_lock;
    WPSubject m_target;
    std::string m_name = "xxx";

    bool m_stopped = false;
    bool m_connected = false;
    bool m_removeAllListeners = false;
    bool m_removeSelfAsListener = false;
    std::set<SPSubject> m_observers;
    std::unordered_map<std::string, std::string> m_properties;

    virtual void ResetSubject(SPSubject& subject) {
        subject->MarkRemoveAllListeners();
        subject->MarkRemoveSelfAsListener();
        subject.reset();
    }

    virtual void ProcessListenersMarkedForRemoval(void) {
        if (this->m_removeAllListeners) {
            this->RemoveAllEventListenersInternal();
            return;
        }
        for (auto it = m_observers.begin(); it != m_observers.end(); ) {
            if ((*it)->IsRemoveSelfAsListenerMarked()) {
                it = this->RemoveEventListenerInternal(*it);
            } else {
                it++;
            }
        }
    }

    virtual void RemoveAllEventListenersInternal() {
        m_observers.clear();
        m_removeAllListeners = false;
    }

    auto RemoveEventListenerInternal(const SPSubject& observer) {
        auto it = m_observers.find(observer);
        assert(it != m_observers.end());
        return m_observers.erase(it);
    }

    virtual void NotifyError(uint64_t error) {
        for (auto& observer : m_observers) {
            observer->onError(error);
        }
        ProcessListenersMarkedForRemoval();
    }

    virtual void NotifyConnect() {
        for (auto& observer : m_observers) {
            observer->onConnect();
        }
        ProcessListenersMarkedForRemoval();
    }

    virtual void NotifyRead(const T2 *b, size_t n) {
        for (auto& observer : m_observers) {
            observer->onRead(b, n);
        }
        ProcessListenersMarkedForRemoval();
    }

    virtual void NotifyWrite(const T2 *b, size_t n) {
        for (auto& observer : m_observers) {
            observer->onWrite(b, n);
        }
        ProcessListenersMarkedForRemoval();
    }

    virtual void NotifyDisconnect() {
        for (auto& observer : m_observers) {
            observer->onDisconnect();
        }
        ProcessListenersMarkedForRemoval();
    }

    virtual void NotifyAccept(void) {
        for (auto& observer : m_observers) {
            observer->onAccept();
        }
        ProcessListenersMarkedForRemoval();
    }

    virtual void NotifyEvent(std::any e) {
        for (auto& observer : m_observers) {
            observer->onEvent(e);
        }
        ProcessListenersMarkedForRemoval();
    }
};

template <typename T1, typename T2>
using SPSubject = std::shared_ptr<subject<T1, T2>>;

template<typename T1, typename T2>
using WPSubject = std::weak_ptr<subject<T1, T2>>;

} // namespace npl

#endif //SUBJECT_HPP
