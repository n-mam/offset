#ifndef LISTENER_HPP
#define LISTENER_HPP

#include <functional>

#include <observer/subject>

namespace npl {

using TListenerOnError = std::function<void (int)>;
using TListenerOnAccept = std::function<void (void)>;
using TListenerOnConnect = std::function<void (void)>;
using TListenerOnDisconnect = std::function<void (void)>;
using TListenerOnRead = std::function<void (const uint8_t *b, size_t n)>;
using TListenerOnWrite = std::function<void (const uint8_t *b, size_t n)>;

class Listener : public subject<uint8_t, uint8_t> {

    public:

    Listener(const std::string& name = "listener") : subject(name) {}

    Listener(
        TListenerOnConnect cbkConnect = nullptr,
        TListenerOnRead cbkRead = nullptr,
        TListenerOnWrite cbkWrite = nullptr,
        TListenerOnDisconnect cbkDisconnect = nullptr,
        TListenerOnAccept cbkAccept = nullptr,
        TListenerOnError cbkError = nullptr) {
            iCbkRead = cbkRead;
            iCbkWrite = cbkWrite;
            iCbkError = cbkError;
            iCbkAccept = cbkAccept;
            iCbkConnect = cbkConnect;
            iCbkDisconnect = cbkDisconnect;
    }

    virtual ~Listener(){}

    virtual void onRead(const uint8_t *b, size_t n) override {
        if (iCbkRead) {
            iCbkRead(b, n);
        }
    }

    virtual void onWrite(const uint8_t *b, size_t n) override {
        if (iCbkWrite) {
            iCbkWrite(b, n);
        }
    }

    virtual void onConnect(void) override {
        if (iCbkConnect) {
            iCbkConnect();
        }
    }

    virtual void onAccept() override {
        if (iCbkAccept) {
            iCbkAccept();
        }
    }

    virtual void onDisconnect(void) {
        if (iCbkDisconnect) {
            iCbkDisconnect();
        }
    }

    virtual void onError(int error) {
        if (iCbkError) {
            iCbkError(error);
        }
    }

    protected:

    TListenerOnRead iCbkRead = nullptr;
    TListenerOnWrite iCbkWrite = nullptr;
    TListenerOnError iCbkError = nullptr;
    TListenerOnAccept iCbkAccept = nullptr;
    TListenerOnConnect iCbkConnect = nullptr;
    TListenerOnDisconnect iCbkDisconnect = nullptr;
};

}

#endif