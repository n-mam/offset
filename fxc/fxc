#ifndef FXC_HPP
#define FXC_HPP

#include <fxc/vd/fxcvd>
#include <fxc/ss/fxcss>

#include <iostream>

namespace fxc {

struct TBackupConfig
{
  std::wstring m_volume;
  std::wstring m_level;
  std::wstring m_folder;
  std::wstring m_format;
  std::wstring m_exclude;
};

auto usage(void)
{
  std::cout << std::endl;
  std::cout << " fxc -d[ump] <file>" << std::endl;
  std::cout << " fxc -f[ull] <vhd[x]> <source> <file>" << std::endl;
  std::cout << " fxc -i[ncr] <vhd[x]> <source> <parent-path> <target-file> <rctid>" << std::endl;
  std::cout << std::endl;
}

auto RecoverVirtualImageToPhysicalVolume(const std::wstring& source, const std::wstring& target)
{
  auto disk = fxc::vd::make_virtual_disk(source);

  if (!disk)
  {
    std::cout << "Failed to create virtaul disk object\n";
    return false;
  }

  HANDLE hTarget = osl::GetVolumeHandle(target.c_str());

  if (hTarget == INVALID_HANDLE_VALUE)
  {
    std::cout << "Failed to open target " << target.c_str() << ", error " << GetLastError() << "\n";
    return false;
  }

  std::unique_ptr<uint8_t[]> buf;

  bool fRet = osl::LockAndDismountVolume(hTarget);

  if (fRet == FALSE)
  {
    std::cout << "LockAndDismountVolume failed\n";
    osl::UnlockVolume(hTarget);
    return false;
  }

  uint64_t nDone = 0;
  DWORD dwBytesWritten;
  auto bs = disk->GetBlockSize();
  buf = std::make_unique<uint8_t []>(bs);

  uint64_t nTotal = disk->GetPartitionLength(0);
  uint64_t offset = disk->GetPartitionStartOffset(0);

  do
  {
    auto pending = nTotal - nDone;

    size_t nToRead = pending > bs ? bs : pending;

    auto n = disk->ReadSync(buf.get(), nToRead, offset + nDone);

    fRet = false;

    if (n != nToRead)
    {
      std::cout << "ReadSync on source returned " << n << "\n";
      break;
    }

    fRet = WriteFile(hTarget, buf.get(), n, &dwBytesWritten, NULL);

    if(!fRet)
    {
      std::cout << "WriteFile on target failed : " << GetLastError();
      break;
    }

    nDone += n;

    std::cout << "n : " << n << " nDone : " << nDone << "\n";

  } while (nDone != nTotal);

  std::cout << "nTotal : " << nTotal << "\n";

  return fRet;
}

auto RecoverVolumeToVolume(const std::wstring& source, const std::wstring& target) 
{
  BOOL fRet = FALSE;
  std::unique_ptr<uint8_t[]> _buf;
  HANDLE hSource = INVALID_HANDLE_VALUE;
  HANDLE hTarget = INVALID_HANDLE_VALUE;
  DWORD dwBytesWritten = 0;
  DWORD lpNumberOfBytesRead = 0;
  
  hSource = osl::GetVolumeHandle(source.c_str());

  if (hSource == INVALID_HANDLE_VALUE)
  {
    std::cout << "Failed to open source volume, error : " << GetLastError() << "\n";
    goto _end;
  }

  fRet = DeviceIoControl(
            hSource,
            FSCTL_ALLOW_EXTENDED_DASD_IO,
            NULL,
            0,
            NULL,
            0,
            NULL,
            NULL);

  if (fRet == FALSE)
  {
    std::cout << "EXTENDED_DASD_IO failed on source, error : " << GetLastError() << "\n";
    goto _end;
  }

  hTarget = osl::GetVolumeHandle(target.c_str());

  if (hTarget == INVALID_HANDLE_VALUE)
  {
    std::cout << "Failed to open target " << target.c_str() << ", error " << GetLastError() << "\n";
    goto _end;
  }

  fRet = osl::LockAndDismountVolume(hTarget);

  if (fRet == FALSE)
  {
    std::cout << "LockAndDismountTargetBlockDevice failed\n";
    goto _end;
  }

  _buf = std::make_unique<uint8_t []>(_1M);

  do
  {
    fRet = ReadFile(hSource, _buf.get(), _1M, &lpNumberOfBytesRead, NULL);

    if (fRet)
    {
      fRet = WriteFile(hTarget, _buf.get(), lpNumberOfBytesRead, &dwBytesWritten, NULL);

      if (fRet == FALSE)
      {
        std::cout << "WriteFile on target failed, error : " << GetLastError() << "\n";
      }
    }
    else
    {
      std::cout << "ReadFile on source failed, error : " << GetLastError() << "\n";
    }

    if (lpNumberOfBytesRead < _1M) break;

  } while (fRet);

  _end:

  if (hSource != INVALID_HANDLE_VALUE)
  {
    CloseHandle(hSource);
  }

  if (hTarget != INVALID_HANDLE_VALUE)
  {
    osl::UnlockVolume(hTarget);
  }

  return fRet;
}

auto ConvertPhysicalVolumesToVirtualImages(const std::vector<TBackupConfig> configuration)
{
  HRESULT hr = fxc::ss::InitializeCOM();

  if (hr != S_OK)
  {
    std::cout << "fxc::ssInitializeCOM failed" << std::endl;
    return false;
  }

  std::vector<std::wstring> supported, unsupported;

  for (const auto& config : configuration)
  {
    auto [volume, level, folder, format, exclude] = config;

    bool isSupported = fxc::ss::IsVolumeSupported(volume.c_str());

    if (isSupported)
    {
      supported.push_back(volume);
    }
    else
    {
      unsupported.push_back(volume);
    }
  }

  ss::CreateSnapshot(
    supported,
    [&] (fxc::ss::TSnapshotSet ss)
    {
      for (int i = 0; i < ss.size(); i++)
      {
        auto [volume1, snapshotDevice, volumeDevice] = ss[i];
        auto [volume2, level, folder, format, exclude] = configuration[i];

        std::wcout << " " << volume1 << " " << snapshotDevice << " " << volumeDevice << std::endl;

        auto target = folder + L"\\" + volumeDevice.substr(4, volumeDevice.size() - 5) + L"." + format;

        fxc::vd::CreateBaseVirtualDisk(format, snapshotDevice, target);
      }
    }
  );

  // todo: full image backup for rawset volumes

  return true;
}

auto MountVirtualDiskAsVolume(const std::wstring& image)
{
  return false;
}

auto TestSnapshot(std::vector<std::wstring> volumes)
{
  fxc::ss::EnumerateSnapshots();
  
  std::vector<std::wstring> supported, unsupported;

  for (const auto& volume : volumes)
  {
    if (fxc::ss::IsVolumeSupported(volume))
    {
      supported.push_back(volume);
    }
    else
    {
      std::wcout << " excluding unsupported volume : " << volume << std::endl;
    }
  }

  fxc::ss::CreateSnapshot(
    supported,
    [] (fxc::ss::TSnapshotSet ss) {
      for (auto& s : ss)
      {
        auto [volume, snapshotDevice, volumeDevice] = s;
        std::wcout << " " << volume << " " << snapshotDevice << " " << volumeDevice << std::endl;
      }
    });
}

auto entry(std::vector<std::wstring> arguments)
{
  if (arguments.size() == 1)
  {
    usage();
    return 0;
  }

  auto cmd = arguments[1];

  arguments.erase(arguments.begin());
  arguments.erase(arguments.begin());

  if (cmd == L"-s")
  {
    fxc::TestSnapshot(arguments);
  }
  else if (cmd == L"-d")
  {
    fxc::vd::DumpVirtualDisk(arguments[0]);
  }
  else if (cmd == L"-f")
  {
    fxc::vd::CreateBaseVirtualDisk(
        arguments[0],
        arguments[1],
        arguments[2]);
  }
  else if (cmd == L"-i")
  {
    fxc::vd::CreateIncrementalVirtualDisk(
        arguments[0],
        arguments[1],
        arguments[2],
        arguments[3],
        arguments[4]);
  }
  else if (cmd == L"-r")
  {
    fxc::rct::ResilientChangeTrackingToDataBlockIO(
        arguments[0], // source live vhd
        arguments[1], // rctid
        _2M);
  }
  else
  {
    usage();
  }

  return 0;
}

} //namespace fxc

#endif //FXC_HPP