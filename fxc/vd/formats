#ifndef FORMATS_HPP
#define FORMATS_HPP

#include <string>
#include <iostream>
#include <inttypes.h>

#pragma pack(1)

typedef struct __GUID {
  unsigned long  Data1;
  unsigned short Data2;
  unsigned short Data3;
  unsigned char  Data4[8];
} __GUID;

void PrintGuid(__GUID guid)
{
  char _buf[1024] = { '\0' };

  sprintf_s(
    _buf, 
    "{%08lX-%04hX-%04hX-%02hhX%02hhX-%02hhX%02hhX%02hhX%02hhX%02hhX%02hhX}",
    guid.Data1, guid.Data2, guid.Data3, 
    guid.Data4[0], guid.Data4[1], guid.Data4[2], guid.Data4[3],
    guid.Data4[4], guid.Data4[5], guid.Data4[6], guid.Data4[7]
  );
  
  LOG << std::string(_buf);
}

auto GuidToWString(__GUID guid)
{
  char _buf[1024] = { '\0' };

  sprintf_s(
    _buf, 
    "{%08lX-%04hX-%04hX-%02hhX%02hhX-%02hhX%02hhX%02hhX%02hhX%02hhX%02hhX}",
    guid.Data1, guid.Data2, guid.Data3, 
    guid.Data4[0], guid.Data4[1], guid.Data4[2], guid.Data4[3],
    guid.Data4[4], guid.Data4[5], guid.Data4[6], guid.Data4[7]
  );

  std::string str(_buf);

  return std::wstring(str.begin(), str.end());
}

void DumpBytes(const uint8_t *buf, int len, bool hex) 
{
  for (int i = 0; i < len; i++)
  {
    if (hex == true)
    {
      LOG << std::hex << std::uppercase << (int)buf[i] << " ";  
    }
    else 
    {   
      if (isascii(buf[i]))
      {
        LOG << buf[i] ;
      }
    }
  }

  LOG;
}

typedef struct PARTITION
{
  uint8_t  boot;             /* 0x80 - active */
  uint8_t  head;             /* starting head */
  uint8_t  sector;           /* starting sector */
  uint8_t  cyl;              /* starting cylinder */
  uint8_t  type;             /* What partition type */
  uint8_t  end_head;         /* end head */
  uint8_t  end_sector;       /* end sector */
  uint8_t  end_cyl;          /* end cylinder */
  uint32_t start_sector;     /* starting sector counting from 0 */
  uint32_t total_sectors;    /* number of sectors in partition */
} Partition, *pPartition;

typedef struct MBR
{
  uint8_t      code[355];
  uint8_t      messages[80];
  uint8_t      x[5];
  uint8_t      DiskID[4];
  uint8_t      cp[2];
  Partition    partitions[4];
  uint16_t     signature;
} MBR, *pMBR;

typedef struct _GPT_LBA_ONE
{
  char           signature[8];
  uint32_t       revision;
  uint32_t       hdr_size;
  uint32_t       hdr_crc;
  uint32_t       reserved;
  //todo
} LBA_ONE, *pLBA_ONE;

typedef struct GptHdr
{
  /* Signature ("EFI PART"). */
  char abSignature[8];
  /* Revision. */
  uint32_t u32Revision;
  /* Header size. */
  uint32_t cbHeader;
  /* CRC of header. */
  uint32_t u32Crc;
} GptHdr;

/*
 * Complete GPT table header for revision 1.0.
 */
typedef struct GptHdrRev1
{
  /* Header. */
  GptHdr   Hdr;
  /* Reserved. */
  uint32_t u32Reserved;
  /* Current LBA. */
  uint64_t u64LbaCurrent;
  /* Backup LBA. */
  uint64_t u64LbaBackup;
  /* First usable LBA for partitions. */
  uint64_t u64LbaFirstPartition;
  /* Last usable LBA for partitions. */
  uint64_t u64LbaLastPartition;
  /* Disk UUID. */
  __GUID   DiskUuid;
  /* LBA of first partition entry. */
  uint64_t u64LbaPartitionEntries;
  /* Number of partition entries. */
  uint32_t cPartitionEntries;
  /* Partition entry size. */
  uint32_t cbPartitionEntry;
  /* CRC of partition entries. */
  uint32_t u32CrcPartitionEntries;
} GptHdrRev1, *pGptHdrRev1;

typedef struct _GUID_Partition_Entry
{
  uint8_t     type_guid[16];
  uint8_t     guid[16];
  uint64_t    start_lba;
  uint64_t    end_lba;
  uint64_t    attributes;
  uint8_t     name[72];
} GPE, *pGPE;

/*
 * Oracle VDI structures 
 */
/*******************************************************************************
*   Constants And Macros, Structures and Typedefs                              *
*******************************************************************************/
/**
 * UUID data type.
 *
 * See RTUuid*.
 *
 * @remarks IPRT defines that the first three integers in the @c Gen struct
 *          interpretation are in little endian representation.  This is
 *          different to many other UUID implementation, and requires
 *          conversion if you need to achieve consistent results.
 */
typedef union RTUUID
{
    /** 8-bit view. */
    uint8_t       au8[16];
    /** 16-bit view. */
    uint16_t    au16[8];
    /** 32-bit view. */
    uint32_t      au32[4];
    /** 64-bit view. */
    uint64_t      au64[2];
    /** The way the UUID is declared by the DCE specification. */
    struct
    {
      uint32_t    u32TimeLow;
      uint16_t  u16TimeMid;
      uint16_t  u16TimeHiAndVersion;
      uint8_t     u8ClockSeqHiAndReserved;
      uint8_t     u8ClockSeqLow;
      uint8_t     au8Node[6];
    } Gen;
} RTUUID;

/** Image info, not handled anyhow.
 *  Must be less than 64 uint8_ts in length, including the trailing 0.
 */
#define VDI_IMAGE_FILE_INFO   "<<< Oracle VM VirtualBox Disk Image >>>\n"

/** The Sector size.
 * Currently we support only 512 uint8_ts sectors.
 */
#define VDI_GEOMETRY_SECTOR_SIZE    (512)
/**  512 = 2^^9 */
#define VDI_GEOMETRY_SECTOR_SHIFT   (9)

/**
 * Harddisk geometry.
 */
typedef struct VDIDISKGEOMETRY
{
    /** Cylinders. */
    uint32_t      cCylinders;
    /** Heads. */
    uint32_t      cHeads;
    /** Sectors per track. */
    uint32_t      cSectors;
    /** Sector size. (uint8_ts per sector) */
    uint32_t      cbSector;
} VDIDISKGEOMETRY, *PVDIDISKGEOMETRY;

/** Image signature. */
#define VDI_IMAGE_SIGNATURE   (0xbeda107f)

typedef struct VDIPREHEADER
{
    /** Just text info about image type, for eyes only. */
    char szFileInfo[64];
    /** The image signature (VDI_IMAGE_SIGNATURE). */
    uint32_t u32Signature;
    /** The image version (VDI_IMAGE_VERSION). */
    uint32_t u32Version;
} VDIPREHEADER, *PVDIPREHEADER;

/**
 * Size of szComment field of HDD image header.
 */
#define VDI_IMAGE_COMMENT_SIZE    256

/**
 * Header to be stored in image file, VDI_IMAGE_VERSION_MAJOR = 0.
 * Prepended by VDIPREHEADER.
 */
typedef struct VDIHEADER0
{
    /** The image type (VDI_IMAGE_TYPE_*). */
    uint32_t        u32Type;
    /** Image flags (VDI_IMAGE_FLAGS_*). */
    uint32_t        fFlags;
    /** Image comment. (UTF-8) */
    char            szComment[VDI_IMAGE_COMMENT_SIZE];
    /** Legacy image geometry (previous code stored PCHS there). */
    VDIDISKGEOMETRY LegacyGeometry;
    /** Size of disk (in uint8_ts). */
    uint64_t        cbDisk;
    /** Block size. (For instance VDI_IMAGE_BLOCK_SIZE.) */
    uint32_t        cbBlock;
    /** Number of blocks. */
    uint32_t        cBlocks;
    /** Number of allocated blocks. */
    uint32_t        cBlocksAllocated;
    /** UUID of image. */
    RTUUID          uuidCreate;
    /** UUID of image's last modification. */
    RTUUID          uuidModify;
    /** Only for secondary images - UUID of primary image. */
    RTUUID          uuidLinkage;
} VDIHEADER0, *PVDIHEADER0;

/**
 * Header to be stored in image file, VDI_IMAGE_VERSION_MAJOR = 1,
 * VDI_IMAGE_VERSION_MINOR = 1. Prepended by VDIPREHEADER.
 */
typedef struct VDIHEADER1
{
    /** Size of this structure in uint8_ts. */
    uint32_t        cbHeader;
    /** The image type (VDI_IMAGE_TYPE_*). */
    uint32_t        u32Type;
    /** Image flags (VDI_IMAGE_FLAGS_*). */
    uint32_t        fFlags;
    /** Image comment. (UTF-8) */
    char            szComment[VDI_IMAGE_COMMENT_SIZE];
    /** Offset of Blocks array from the beginning of image file.
     * Should be sector-aligned for HDD access optimization. */
    uint32_t        offBlocks;
    /** Offset of image data from the beginning of image file.
     * Should be sector-aligned for HDD access optimization. */
    uint32_t        offData;
    /** Legacy image geometry (previous code stored PCHS there). */
    VDIDISKGEOMETRY LegacyGeometry;
    /** Was BIOS HDD translation mode, now unused. */
    uint32_t        u32Dummy;
    /** Size of disk (in uint8_ts). */
    uint64_t        cbDisk;
    /** Block size. (For instance VDI_IMAGE_BLOCK_SIZE.) Should be a power of 2! */
    uint32_t        cbBlock;
    /** Size of additional service information of every data block.
     * Prepended before block data. May be 0.
     * Should be a power of 2 and sector-aligned for optimization reasons. */
    uint32_t        cbBlockExtra;
    /** Number of blocks. */
    uint32_t        cBlocks;
    /** Number of allocated blocks. */
    uint32_t        cBlocksAllocated;
    /** UUID of image. */
    RTUUID          uuidCreate;
    /** UUID of image's last modification. */
    RTUUID          uuidModify;
    /** Only for secondary images - UUID of previous image. */
    RTUUID          uuidLinkage;
    /** Only for secondary images - UUID of previous image's last modification. */
    RTUUID          uuidParentModify;
} VDIHEADER1, *PVDIHEADER1;

/**
 * Header to be stored in image file, VDI_IMAGE_VERSION_MAJOR = 1,
 * VDI_IMAGE_VERSION_MINOR = 1, the slightly changed variant necessary as the
 * old released code doesn't support changing the minor version at all.
 */
typedef struct VDIHEADER1PLUS
{
    /** Size of this structure in uint8_ts. */
    uint32_t        cbHeader;
    /** The image type (VDI_IMAGE_TYPE_*). */
    uint32_t        u32Type;
    /** Image flags (VDI_IMAGE_FLAGS_*). */
    uint32_t        fFlags;
    /** Image comment. (UTF-8) */
    char            szComment[VDI_IMAGE_COMMENT_SIZE];
    /** Offset of blocks array from the beginning of image file.
     * Should be sector-aligned for HDD access optimization. */
    uint32_t        offBlocks;
    /** Offset of image data from the beginning of image file.
     * Should be sector-aligned for HDD access optimization. */
    uint32_t        offData;
    /** Legacy image geometry (previous code stored PCHS there). */
    VDIDISKGEOMETRY LegacyGeometry;
    /** Was BIOS HDD translation mode, now unused. */
    uint32_t        u32Dummy;
    /** Size of disk (in uint8_ts). */
    uint64_t        cbDisk;
    /** Block size. (For instance VDI_IMAGE_BLOCK_SIZE.) Should be a power of 2! */
    uint32_t        cbBlock;
    /** Size of additional service information of every data block.
     * Prepended before block data. May be 0.
     * Should be a power of 2 and sector-aligned for optimization reasons. */
    uint32_t        cbBlockExtra;
    /** Number of blocks. */
    uint32_t        cBlocks;
    /** Number of allocated blocks. */
    uint32_t        cBlocksAllocated;
    /** UUID of image. */
    RTUUID          uuidCreate;
    /** UUID of image's last modification. */
    RTUUID          uuidModify;
    /** Only for secondary images - UUID of previous image. */
    RTUUID          uuidLinkage;
    /** Only for secondary images - UUID of previous image's last modification. */
    RTUUID          uuidParentModify;
    /** LCHS image geometry (new field in VDI1.2 version. */
    VDIDISKGEOMETRY LCHSGeometry;
} VDIHEADER1PLUS, *PVDIHEADER1PLUS;

/**
 * Header structure for all versions.
 */
typedef struct VDIHEADER
{
    unsigned uVersion;
    union
    {
        VDIHEADER0    v0;
        VDIHEADER1    v1;
        VDIHEADER1PLUS v1plus;
    } u;
} VDIHEADER, *PVDIHEADER;

/*
 * VHDX  structures
 */
typedef struct VHDX_FILE_IDENTIFIER 
{
   uint64_t     Signature;
   uint16_t     Creator[256];
} VHDX_FILE_IDENTIFIER, *pVHDX_FILE_IDENTIFIER;

typedef struct VHDX_HEADER
{
    uint32_t    Signature;
    uint32_t    Checksum;
    uint64_t    SequenceNumber;
    __GUID      FileWriteGuid;
    __GUID      DataWriteGuid;
    __GUID 	    LogGuid;
    uint16_t    LogVersion;
    uint16_t    Version;
    uint32_t    LogLength;
    uint64_t    LogOffset;
    uint8_t	    Reserved[4016];
} VHDX_HEADER, *pVHDX_HEADER;

typedef struct VHDX_REGION_TABLE_HEADER
{
    uint32_t     Signature;
    uint32_t     Checksum;
    uint32_t     EntryCount;
    uint32_t     Reserved;
} VHDX_REGION_TABLE_HEADER, *pVHDX_REGION_TABLE_HEADER;

typedef struct VHDX_REGION_TABLE_ENTRY
{
    __GUID       Guid;
    uint64_t     FileOffset;
    uint32_t     Length;
    uint32_t     Required:1;
    uint32_t     Reserved:31;
} VHDX_REGION_TABLE_ENTRY, *pVHDX_REGION_TABLE_ENTRY;

typedef struct VHDX_REGION_TABLE
{
  VHDX_REGION_TABLE_HEADER Header;
  VHDX_REGION_TABLE_ENTRY Entries[2];
  //.. only 2 regions are defined by the spec as of now
} VHDX_REGION_TABLE, *pVHDX_REGION_TABLE;

typedef struct VHDX_METADATA_TABLE_HEADER
{
    uint64_t     Signature;
    uint16_t     Reserved;
    uint16_t     EntryCount;
    uint32_t     Reserved2[5];
} VHDX_METADATA_TABLE_HEADER, *pVHDX_METADATA_TABLE_HEADER;

typedef struct VHDX_METADATA_TABLE_ENTRY
{
    __GUID       ItemId;
    uint32_t     Offset;
    uint32_t     Length;
    uint32_t     IsUser:1;
    uint32_t     IsVirtualDisk:1;
    uint32_t     IsRequired:1;
    uint32_t     Reserved:29;
    uint32_t     Reserved2;
} VHDX_METADATA_TABLE_ENTRY, *pVHDX_METADATA_TABLE_ENTRY;

typedef struct VHDX_FILE_PARAMETERS
{
    uint32_t     BlockSize;
    uint32_t     LeaveBlocksAllocated:1;
    uint32_t     HasParent:1;
    uint32_t     Reserved:30;
} VHDX_FILE_PARAMETERS, *pVHDX_FILE_PARAMETERS;

typedef struct VHDX_VIRTUAL_DISK_SIZE
{
  uint64_t VirtualDiskSize;
} VHDX_VIRTUAL_DISK_SIZE, *pVHDX_VIRTUAL_DISK_SIZE;

typedef struct VHDX_PAGE83_DATA
{
  __GUID  Page83Data;
} VHDX_PAGE83_DATA, *pVHDX_PAGE83_DATA;

typedef struct VHDX_VIRTUAL_DISK_LOGICAL_SECTOR_SIZE
{
  uint32_t LogicalSectorSize;
} VHDX_VIRTUAL_DISK_LOGICAL_SECTOR_SIZE, *pVHDX_VIRTUAL_DISK_LOGICAL_SECTOR_SIZE;

typedef struct VHDX_VIRTUAL_DISK_PHYSICAL_SECTOR_SIZE
{
  uint32_t PhysicalSectorSize;
} VHDX_VIRTUAL_DISK_PHYSICAL_SECTOR_SIZE, *pVHDX_VIRTUAL_DISK_PHYSICAL_SECTOR_SIZE;

typedef struct VHDX_PARENT_LOCATOR_HEADER
{
    __GUID     LocatorType;
    uint16_t   Reserved;
    uint16_t   KeyValueCount;
} VHDX_PARENT_LOCATOR_HEADER, *pVHDX_PARENT_LOCATOR_HEADER;

typedef struct VHDX_PARENT_LOCATOR_ENTRY
{
    uint32_t   KeyOffset;
    uint32_t   ValueOffset;
    uint16_t   KeyLength;
    uint16_t   ValueLength;
} VHDX_PARENT_LOCATOR_ENTRY, *pVHDX_PARENT_LOCATOR_ENTRY;

typedef struct VHDX_PL_KV
{
   wchar_t key[64];
   wchar_t value[256];
} VHDX_PL_KV, *pVHDX_PL_KV;

typedef struct VHDX_PARENT_LOCATOR
{
  VHDX_PARENT_LOCATOR_HEADER iHeader;
  VHDX_PARENT_LOCATOR_ENTRY iEntries[2];
  VHDX_PL_KV iPlkv[5];
} VHDX_PARENT_LOCATOR, *pVHDX_PARENT_LOCATOR;


typedef struct VHDX_METADATA_TABLE
{
    VHDX_METADATA_TABLE_HEADER Header;
    VHDX_METADATA_TABLE_ENTRY Entries[6];
} VHDX_METADATA_TABLE, *pVHDX_METADATA_TABLE;

typedef struct VHDX_METADATA_OBJECTS
{
    VHDX_FILE_PARAMETERS                   iFileParameters;
    VHDX_VIRTUAL_DISK_SIZE                 iVirtualDiskSize;
    VHDX_VIRTUAL_DISK_LOGICAL_SECTOR_SIZE  iLogicalSectorSize;
    VHDX_VIRTUAL_DISK_PHYSICAL_SECTOR_SIZE iPhysicalSectorSize;
    VHDX_PAGE83_DATA                       iPage83Data;
    VHDX_PARENT_LOCATOR                    iParentLocator;
} VHDX_METADATA_OBJECTS, *pVHDX_METADATA_OBJECTS;

typedef struct VHDX_METADATA
{
    VHDX_METADATA_TABLE iTable;   
    //_64K boundary
    VHDX_METADATA_OBJECTS iObjects;
} VHDX_METADATA, *pVHDX_METADATA;

typedef struct VHDX_BAT_ENTRY
{
    uint64_t   State:3;
    uint64_t   Reserved:17;
    uint64_t   FileOffsetMB:44;
} VHDX_BAT_ENTRY, *pVHDX_BAT_ENTRY;

/*
 * VHD structures
 */
typedef struct VHD_DISK_FOOTER
{
    uint8_t       Cookie[8];
    uint8_t       Features[4];
    uint8_t       FileFormatVersion[4];
    uint8_t       DataOffset[8];
    uint8_t       TimeStamp[4];
    uint8_t       CreatorApplication[4];
    uint8_t       CreatorVersion[4];
    uint8_t       CreatorHostOS[4];
    uint8_t       OriginalSize[8];
    uint8_t       CurrentSize[8];
    uint8_t       Geometry[4];
    uint8_t       DiskType[4];
    uint8_t       Checksum[4];
    uint8_t       UniqueId[16];
    uint8_t       SavedState;
    uint8_t       Reserved[427];
} VHD_DISK_FOOTER, *pVHD_DISK_FOOTER;

constexpr int PLDataSpaceSize = 1024;

typedef struct PARENT_LOCATER_ENTRY
{
    uint8_t        PlatformCode[4];
    uint8_t        PlatformDataSpace[4];
    uint8_t        PlatformDataLength[4];
    uint8_t        Reserved[4];
    uint8_t        PlatformDataOffset[8];
} PLE, *pPLE;

typedef struct VHD_SPARSE_HEADER
{
    uint8_t       Cookie[8];
    uint8_t       DataOffset[8];
    uint8_t       TableOffset[8];
    uint8_t       HeaderVersion[4];
    uint8_t       MaxTableEntries[4];
    uint8_t       BlockSize[4];
    uint8_t       Checksum[4];
    uint8_t       ParentUniqueId[16];
    uint8_t       ParentTimeStamp[4];
    uint8_t       Reserved[4];
    uint8_t       ParentName[512];
    PLE           ParentLocatorTable[8];
    uint8_t       Reserved3[256];
} VHD_SPARSE_HEADER, *pVHD_SPARSE_HEADER;

typedef struct VHD_FOOTER_HEADER
{
    VHD_DISK_FOOTER     footer;
    VHD_SPARSE_HEADER   header;
} VHD_FOOTER_HEADER, *pVHD_FOOTER_HEADER;

/*
 * T2 image format
 */
typedef struct FC_HDR_CLEAR
{
  /*  "flxcrypt"  */
  unsigned char   magic[8]; 
  unsigned char   salt[128];
  unsigned char   flags[4];
  uint32_t        blocksize;
  /*
   * size at this point is 8 + 128 + 4 + 4 = 140
   */
} FCHDR, *pFCHDR;

typedef struct Differencing_Disk_Keys
{
   FCHDR            clear;
   wchar_t        * szImage;
   unsigned char  * keys;              /* up-to 3, 256 bit keys */
   const char     * cascade;        /* cipher cascade        */
   struct Differencing_Disk_Keys *next;   
} DDK, *pDDK;

typedef struct _FC_SPAN_HEADER
{
  FCHDR clear;

  /* span size, minus the footer. */
  uint64_t  spansize;

  /* size of the BAT (DWORD + ULL)*/  
  uint64_t  batsize;

  /* parent's path */
  unsigned char parent[244];

} FC_SPAN_HEADER, *pFC_SPAN_HEADER;

/* Hosted VMDK structures */

typedef uint64_t SectorType;
typedef uint8_t  Bool;

typedef struct SparseExtentHeader
{
   uint32_t       magicNumber;
   uint32_t       version;
   uint32_t       flags;
   SectorType   capacity;
   SectorType   grainSize;
   SectorType   descriptorOffset;
   SectorType   descriptorSize;
   uint32_t       numGTEsPerGT;
   SectorType   rgdOffset;
   SectorType   gdOffset;
   SectorType   overHead;
   Bool         uncleanShutdown;
   char         singleEndLineChar;
   char         nonEndLineChar;
   char         doubleEndLineChar1;
   char         doubleEndLineChar2;
   uint16_t     compressAlgorithm;
   uint8_t      pad[433];
} SparseExtentHeader, *pSEH; 

/* QCOW Structures */
typedef struct QCowHeader
{
    /* Magic value. */
    uint32_t    u32Magic;
    /* Version of the image. */
    uint32_t    u32Version;
    /* Version dependent data. */
    union
    {
        /* Version 1. */
        struct
        {
            /* Backing file offset. */
            uint64_t    u64BackingFileOffset;
            /* Size of the backing file. */
            uint32_t    u32BackingFileSize;
            /* mtime (Modification time?) - can be ignored. */
            uint32_t    u32MTime;
            /* Logical size of the image in uint8_ts. */
            uint64_t    u64Size;
            /* Number of bits in the virtual offset used as a cluster offset. */
            uint8_t     u8ClusterBits;
            /* Number of bits in the virtual offset used for the L2 index. */
            uint8_t     u8L2Bits;
            /* Padding because the header is not packed in the original source. */
            uint16_t    u16Padding;
            /* Used cryptographic method. */
            uint32_t    u32CryptMethod;
            /* Offset of the L1 table in the image in uint8_ts. */
            uint64_t    u64L1TableOffset;
        } v1;
        /* Version 2. */
        struct
        {
            /* Backing file offset. */
            uint64_t    u64BackingFileOffset;
            /* Size of the backing file. */
            uint32_t    u32BackingFileSize;
            /* Number of bits in the virtual offset used as a cluster offset. */
            uint32_t    u32ClusterBits;
            /* Logical size of the image. */
            uint64_t    u64Size;
            /* Used cryptographic method. */
            uint32_t    u32CryptMethod;
            /* Size of the L1 table in entries (each 8uint8_ts big). */
            uint32_t    u32L1Size;
            /* Offset of the L1 table in the image in uint8_ts. */
            uint64_t    u64L1TableOffset;
            /* Start of the refcount table in the image. */
            uint64_t    u64RefcountTableOffset;
            /* Size of the refcount table in clusters. */
            uint32_t    u32RefcountTableClusters;
            /* Number of snapshots in the image. */
            uint32_t    u32NbSnapshots;
            /* Offset of the first snapshot header in the image. */
            uint64_t    u64SnapshotsOffset;
        } v2;
    } Version;
} QCowHeader, *pQCowHeader;

typedef struct QedHeader
{
    /* Magic value. */
    uint32_t    u32Magic;
    /* Cluster size in uint8_ts. */
    uint32_t    u32ClusterSize;
    /* Size of L1 and L2 tables in clusters. */
    uint32_t    u32TableSize;
    /* size of this header structure in clusters. */
    uint32_t    u32HeaderSize;
    /* Features used for the image. */
    uint64_t    u64FeatureFlags;
    /* Compatibility features used for the image. */
    uint64_t    u64CompatFeatureFlags;
    /* Self resetting feature bits. */
    uint64_t    u64AutoresetFeatureFlags;
    /* Offset of the L1 table in uint8_ts. */
    uint64_t    u64OffL1Table;
    /* Logical image size as seen by the guest. */
    uint64_t    u64Size;
    /* Offset of the backing filename in uint8_ts. */
    uint32_t    u32OffBackingFilename;
    /* Size of the backing filename. */
    uint32_t    u32BackingFilenameSize;
} QedHeader, *pQedHeader;

#pragma pack()

// --- Payload BAT Entry States

/* Block not present and the data is undefined. */
#define VHDX_BAT_ENTRY_PAYLOAD_BLOCK_NOT_PRESENT       (0)
/* Data in this block is undefined. */
#define VHDX_BAT_ENTRY_PAYLOAD_BLOCK_UNDEFINED         (1)
/* Data in this block contains zeros. */
#define VHDX_BAT_ENTRY_PAYLOAD_BLOCK_ZERO              (2)
/*
 * Block was unmapped by the application or system and
 * data is either zero or the data before the block was
 * unmapped.
 */
#define VHDX_BAT_ENTRY_PAYLOAD_BLOCK_UNMAPPED          (3)
/* 
   Block data is in the file pointed to by the FileOffsetMB field. 
   For reads from the blocks in this state, parsers should return
   the block contents defined in the file at the location specified
   by the FileOffsetMB field. For differencing VHDX files, the sector
   bitmap MUST NOT BE inspected as the block is fully present in the VHDX file.
*/
#define VHDX_BAT_ENTRY_PAYLOAD_BLOCK_FULLY_PRESENT     (6)
/* Block is partially present, use sector bitmap to get present sectors. */
#define VHDX_BAT_ENTRY_PAYLOAD_BLOCK_PARTIALLY_PRESENT (7)

// --- Sector Bitmap BAT Entry States

/* The sector bitmap block is undefined and not allocated in the file. */
#define VHDX_BAT_ENTRY_SB_BLOCK_NOT_PRESENT            (0)
/* The sector bitmap block is defined at the file location. */
#define VHDX_BAT_ENTRY_SB_BLOCK_PRESENT                (6)

/* Return the BAT state from a given entry. */
#define VHDX_BAT_ENTRY_GET_STATE(bat) ((bat) & (unsigned __int64)(0x7))

/* Get the FileOffsetMB field from a given BAT entry. */
#define VHDX_BAT_ENTRY_GET_FILE_OFFSET_MB(bat) (((bat) & (unsigned __int64)(0xfffffffffff00000)) >> 20)

/* Get a uint8_t offset from the BAT entry. */
#define VHDX_BAT_ENTRY_GET_FILE_OFFSET(bat) (VHDX_BAT_ENTRY_GET_FILE_OFFSET_MB(bat) * (unsigned __int64)(1*1024*1024))

const __GUID _GUID_REGION_BAT = { 0x2DC27766, 0xF623, 0x4200, { 0x9D, 0x64, 0x11, 0x5E, 0x9B, 0xFD, 0x4A, 0x08 } };

const __GUID _GUID_REGION_METADATA = { 0x8B7CA206, 0x4790, 0x4B9A, { 0xB8, 0xFE, 0x57, 0x5F, 0x05, 0x0F, 0x88, 0x6E } };

const __GUID _GUID_FILE_PARAMETERS = { 0xCAA16737, 0xFA36, 0x4D43, { 0xB3, 0xB6, 0x33, 0xF0, 0xAA, 0x44, 0xE7, 0x6B } };

const __GUID _GUID_VIRTUAL_DISK_SIZE = { 0x2FA54224, 0xCD1B, 0x4876, { 0xB2, 0x11, 0x5D, 0xBE, 0xD8, 0x3B, 0xF4, 0xB8 } };

const __GUID _GUID_PARENT_LOCATOR = { 0xA8D35F2D, 0xB30B, 0x454D, { 0xAB, 0xF7, 0xD3, 0xD8, 0x48, 0x34, 0xAB, 0x0C } };

const __GUID _GUID_LOGICAL_SECTOR_SIZE = { 0x8141BF1D, 0xA96F, 0x4709, { 0xBA, 0x47, 0xF2, 0x33, 0xA8, 0xFA, 0xAB, 0x5F } };

const __GUID _GUID_PHYSICAL_SECTOR_SIZE = { 0xCDA348C7, 0x445D, 0x4471, { 0x9C, 0xC9, 0xE9, 0x88, 0x52, 0x51, 0xC5, 0x56 } };

const __GUID _GUID_PAGE_83_DATA = { 0xBECA12AB, 0xB2E6, 0x4523, { 0x93, 0xEF, 0xC3, 0x09, 0xE0, 0x00, 0xC7, 0x46 } };

#define PLATFORM_CODE_WIN_ABSOLUTE  "W2ku"
#define PLATFORM_CODE_WIN_RELATIVE  "W2ru"

#endif