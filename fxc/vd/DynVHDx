#ifndef DYNVHDX_HPP
#define DYNVHDX_HPP

#include <string>
#include <math.h>

#include <fxc/vd/BaseDisk>
#include <fxc/vd/formats>

#include <crc32c/crc32c.h>

namespace fxc {

class CDynamicVHDx : public CBaseDisk
{
  public:

    VHDX_FILE_IDENTIFIER iFileIdentifier = { 0 };

    VHDX_HEADER iHeader = { 0 };

    VHDX_REGION_TABLE iRegionTable= { 0 };

    VHDX_METADATA iMetadata = { 0 };

    std::unique_ptr<uint8_t []> iMetadataRaw;

    uint64_t iBlockCount = 0;

    uint32_t iChunkRatio = 0;

    uint64_t iBATSize = 0;

    std::unique_ptr<uint64_t []> iBAT = nullptr;

  public:

    virtual ~CDynamicVHDx() {}

    // New base VHDx contstructor
    CDynamicVHDx(uint64_t size, uint32_t blocksize) : CBaseDisk(size, blocksize)
    {
      InitializeFileIdentifier();
      InitializeHeader();
      InitializeMetadataRegion(blocksize + size, blocksize, nullptr);
      InitializeBATRegion();
      InitializeRegionTable();
      iPayloadBlock = std::make_unique<uint8_t []>(GetBlockSize());
    }

    // new child VHDx contstructor
    CDynamicVHDx(CDynamicVHDx *parent)
    {
      auto blocksize = parent->GetBlockSize();
      InitializeFileIdentifier();
      InitializeHeader();
      InitializeMetadataRegion(parent->GetLogicalDiskLength(), blocksize, parent);
      InitializeBATRegion();
      InitializeRegionTable();
      iPayloadBlock = std::make_unique<uint8_t []>(blocksize);
    }

    // Existing VHDx constructor
    CDynamicVHDx(const std::wstring& path) : CBaseDisk(path, _1M)
    {
      memmove(&iFileIdentifier, iRawSectors.get(), sizeof(VHDX_FILE_IDENTIFIER));
      memmove(&iHeader, iRawSectors.get() + _64K, sizeof(VHDX_HEADER));
      memmove(&iRegionTable, iRawSectors.get() + _64K + _64K + _64K, sizeof(VHDX_REGION_TABLE));

      uint64_t bat_reg_off, meta_reg_off;
      uint32_t meta_reg_len, bat_reg_len;

      for (uint32_t i = 0; i < iRegionTable.Header.EntryCount; i++)
      {
        auto rt_entry = &iRegionTable.Entries[i];

        if (rt_entry->Guid.Data1 == 0x8B7CA206 &&
            rt_entry->Guid.Data2 == 0x4790 &&
            rt_entry->Guid.Data3 == 0x4B9A)
        {
          // Metadata Region
          meta_reg_off = rt_entry->FileOffset;
          meta_reg_len = rt_entry->Length;
        }
        else if (rt_entry->Guid.Data1 == 0x2DC27766 &&
                 rt_entry->Guid.Data2 == 0xF623 &&
                 rt_entry->Guid.Data3 == 0x4200)
        {
          // BAT Region
          bat_reg_off = rt_entry->FileOffset;
          bat_reg_len = rt_entry->Length;
        }
      }

      // read the metadata region
      iMetadataRaw = std::make_unique<uint8_t []>(meta_reg_len);

      iFile->ReadSync(iMetadataRaw.get(), meta_reg_len, meta_reg_off);

      memmove(&iMetadata.iTable, iMetadataRaw.get(), sizeof(VHDX_METADATA_TABLE));

      for (uint32_t i = 0; i < iMetadata.iTable.Header.EntryCount; i++)
      {
        auto mdt_entry = &iMetadata.iTable.Entries[i];

        void *metadata_item = (void *) (iMetadataRaw.get() + mdt_entry->Offset);

        if (mdt_entry->ItemId.Data1 == 0xCAA16737)
        {
          memmove(&iMetadata.iObjects.iFileParameters, metadata_item, sizeof(VHDX_FILE_PARAMETERS));
        }
        else if (mdt_entry->ItemId.Data1 == 0x2FA54224)
        {
          memmove(&iMetadata.iObjects.iVirtualDiskSize, metadata_item, sizeof(VHDX_VIRTUAL_DISK_SIZE));
        }
        else if (mdt_entry->ItemId.Data1 == 0xBECA12AB)
        {
          //"Page 83 Data";
        }
        else if (mdt_entry->ItemId.Data1 == 0x8141BF1D) 
        {
          memmove(&iMetadata.iObjects.iLogicalSectorSize, metadata_item, sizeof(VHDX_VIRTUAL_DISK_LOGICAL_SECTOR_SIZE));
        }
        else if (mdt_entry->ItemId.Data1 == 0xCDA348C7)
        {
          memmove(&iMetadata.iObjects.iPhysicalSectorSize, metadata_item, sizeof(VHDX_VIRTUAL_DISK_PHYSICAL_SECTOR_SIZE));
        }
        else if (mdt_entry->ItemId.Data1 == 0xA8D35F2D)
        {
          //"Parent Locator";
        }
      }

      if (IsDifferencing())
      {
        auto parentLocators = GetParentLocators();

        for(const auto& pl : parentLocators)
        {
          std::wcout << pl << std::endl;
        }
      }

      InitializeBATRegion();

      assert(iBATSize == bat_reg_len);

      iFile->ReadSync((uint8_t *)iBAT.get(), iBATSize, bat_reg_off);
    }

    virtual uint32_t GetBlockSize() override
    {
      return iMetadata.iObjects.iFileParameters.BlockSize;
    }

    virtual uint64_t GetTotalBATEntries(void)
    {
      return iTotalBatEntries;
    }

    virtual bool IsDifferencing() override
    {
      return iMetadata.iObjects.iFileParameters.HasParent;
    }

    virtual std::vector<std::wstring> GetParentLocators(void) override
    {
      std::vector<std::wstring> out;

      auto metadata_table_hdr = (pVHDX_METADATA_TABLE_HEADER) iMetadataRaw.get();

      auto mdt_entry = (VHDX_METADATA_TABLE_ENTRY *) ((uint8_t *)metadata_table_hdr + sizeof(VHDX_METADATA_TABLE_HEADER));

      for (int i = 0; i < metadata_table_hdr->EntryCount; i++)
      {
        if (mdt_entry->ItemId.Data1 == 0xA8D35F2D)
        {
          void *metadata_item = (void *) (iMetadataRaw.get() + mdt_entry->Offset);

          auto pl = (pVHDX_PARENT_LOCATOR) metadata_item;

          for (int j = 0; j < pl->iHeader.KeyValueCount; j++)
          {
            out.push_back(
              std::wstring(
                (wchar_t *)((uint8_t *)metadata_item + pl->iEntries[j].ValueOffset), 
                pl->iEntries[j].ValueLength / sizeof(wchar_t)
              )
            );
          }

          break;
        }

        mdt_entry++;
      }

      return out;
    }

    virtual uint64_t FirstDataBlockOffsetMB()
    {
      return (_1M + _1M + _1M + iBATSize) / _1M;
    }

    virtual uint64_t GetLogicalDiskLength() override
    {
      return iMetadata.iObjects.iVirtualDiskSize.VirtualDiskSize;
    }

    virtual void DumpStructure(void) override
    {
      std::cout << "\n Chunk Ratio : " << iChunkRatio << " iTotalBatEntries : " << iTotalBatEntries << std::endl;

      pVHDX_FILE_IDENTIFIER vhdx_ftype = (pVHDX_FILE_IDENTIFIER) iRawSectors.get(); 

      for (int i = 0; i < sizeof(vhdx_ftype->Signature); i++)
      {
        printf(" %c ", *(((unsigned char *) &(vhdx_ftype->Signature)) + i));
      }

      printf("\n");

      for (int i = 0; i < 256 && vhdx_ftype->Creator[i]; i++)
      {
        wprintf(L" %c ", vhdx_ftype->Creator[i]);
      }

      printf("\n");

      /////////////////// VHDx header //////////////////////////
      // Move past 64KB in _buf for the first VHDX header copy

      printf("\n HEADER - 64K offset :\n");
  
      pVHDX_HEADER vhdx_hdr = (pVHDX_HEADER) (iRawSectors.get() + _64K);

      for (int i = 0; i < sizeof(vhdx_hdr->Signature); i++)
      {
        printf("  %c", *(((unsigned char *) &(vhdx_hdr->Signature)) + i));
      }

      printf("\n  Checksum : %x", vhdx_hdr->Checksum);
      printf("\n  SequenceNumber : %I64x", vhdx_hdr->SequenceNumber);

      printf("\n  FileWriteGuid : "); PrintGuid(vhdx_hdr->FileWriteGuid);
      printf("\n  DataWriteGuid : "); PrintGuid(vhdx_hdr->DataWriteGuid);
      printf("\n  LogGuid       : "); PrintGuid(vhdx_hdr->LogGuid);

      printf("\n  LogVersion : %x", vhdx_hdr->LogVersion);
      printf("\n  Version    : %x", vhdx_hdr->Version);
      printf("\n  LogLength  : %x", vhdx_hdr->LogLength);
      printf("\n  LogOffset  : %I64x", vhdx_hdr->LogOffset);

      printf("\n\n HEADER - 128K offset :\n");
  
      vhdx_hdr = (pVHDX_HEADER) (iRawSectors.get() + 128 * 1024);

      for (int i = 0; i < sizeof(vhdx_hdr->Signature); i++)
      {
        printf("  %c", *(((unsigned char *) &(vhdx_hdr->Signature)) + i));
      }

      printf("\n  Checksum : %x", vhdx_hdr->Checksum);
      printf("\n  SequenceNumber : %I64x", vhdx_hdr->SequenceNumber);
      printf("\n  FileWriteGuid : "); PrintGuid(vhdx_hdr->FileWriteGuid);
      printf("\n  DataWriteGuid : "); PrintGuid(vhdx_hdr->DataWriteGuid);
      printf("\n  LogGuid       : "); PrintGuid(vhdx_hdr->LogGuid);

      printf("\n  LogVersion : %x", vhdx_hdr->LogVersion);
      printf("\n  Version    : %x", vhdx_hdr->Version);
      printf("\n  LogLength  : %x", vhdx_hdr->LogLength);
      printf("\n  LogOffset  : %I64x", vhdx_hdr->LogOffset);

      /////////////////// Region table header //////////////////////////

      printf("\n\n REGION TABLE - 192K offset :\n");

      auto rt_header = (pVHDX_REGION_TABLE_HEADER) (iRawSectors.get() + 192 * 1024);

      for (int i = 0; i < sizeof(rt_header->Signature); i++)
      {
        printf("  %c", *(((unsigned char *) &(rt_header->Signature)) + i));
      }
  
      printf("\n  Checksum : %x", rt_header->Checksum);
      printf("\n  EntryCount : %x", rt_header->EntryCount);
      printf("\n  Reserved : %x", rt_header->Reserved);
  
      /////////////////// Region table entries //////////////////////////

      uint64_t bat_reg_off, meta_reg_off;
      uint32_t meta_reg_len, bat_reg_len;
    
      auto rt_entry = (pVHDX_REGION_TABLE_ENTRY) (rt_header + 1);

      for (uint32_t i = 1; i <= rt_header->EntryCount; i++)
      {
        auto region_type = "Unknown Region";
        
        if (rt_entry->Guid.Data1 == 0x8B7CA206 &&
            rt_entry->Guid.Data2 == 0x4790 &&
            rt_entry->Guid.Data3 == 0x4B9A)
        {
          region_type = "Metadata Region";
          meta_reg_off = rt_entry->FileOffset;
          meta_reg_len = rt_entry->Length;
        }
        else if (rt_entry->Guid.Data1 == 0x2DC27766 &&
                 rt_entry->Guid.Data2 == 0xF623 &&
                 rt_entry->Guid.Data3 == 0x4200)
        {
          region_type = "BAT Region";
          bat_reg_off = rt_entry->FileOffset;
          bat_reg_len = rt_entry->Length;
        }

        printf("\n  ------------"); 
        printf("\n  rte, GUID : "); PrintGuid(rt_entry->Guid); printf(" [%s] ", region_type);
        printf("\n  rte, FileOffset : %I64x", rt_entry->FileOffset);
        printf("\n  rte, Length : %x", rt_entry->Length);
        printf("\n  rte, Required: %x", rt_entry->Required);

        rt_entry++;
      }

      /////////////////// Region table header //////////////////////////

      printf("\n\n REGION TABLE - 256K offset :\n");

      rt_header = (pVHDX_REGION_TABLE_HEADER) (iRawSectors.get() + 256 * 1024);  

      for (int i = 0; i < sizeof(rt_header->Signature); i++)
      {
        printf("  %c", *(((unsigned char *) &(rt_header->Signature)) + i));
      }

      printf("\n  Checksum : %x", rt_header->Checksum);
      printf("\n  EntryCount : %x", rt_header->EntryCount);
      printf("\n  Reserved : %x", rt_header->Reserved);

      /////////////////// Region table entries //////////////////////////

      rt_entry = (pVHDX_REGION_TABLE_ENTRY) (rt_header + 1);

      for (uint32_t i = 1; i <= rt_header->EntryCount; i++)
      {
        auto region_type = "Unknown Region";

        if (rt_entry->Guid.Data1 == 0x8B7CA206 &&
            rt_entry->Guid.Data2 == 0x4790 &&
            rt_entry->Guid.Data3 == 0x4B9A)
        {
          region_type = "Metadata Region";
          meta_reg_off = rt_entry->FileOffset;
          meta_reg_len = rt_entry->Length;
        }
        else if (rt_entry->Guid.Data1 == 0x2DC27766 &&
                 rt_entry->Guid.Data2 == 0xF623 &&
                 rt_entry->Guid.Data3 == 0x4200)
        {
          region_type = "BAT Region";
          bat_reg_off = rt_entry->FileOffset;
          bat_reg_len = rt_entry->Length;
        }

        printf("\n  ------------");
        printf("\n  rte, GUID : "); PrintGuid(rt_entry->Guid); printf(" [%s] ", region_type);
        printf("\n  rte, FileOffset : %I64x", rt_entry->FileOffset);
        printf("\n  rte, Length : %x", rt_entry->Length);
        printf("\n  rte, Required: %x", rt_entry->Required);

        rt_entry++;
      }

      /////////////////// Metadata Region  //////////////////////////
      printf("\n\n Metadata Region\n");

      auto metadata_table_hdr = (pVHDX_METADATA_TABLE_HEADER) iMetadataRaw.get();

      for (int i = 0; i < sizeof(metadata_table_hdr->Signature); i++)
      {
        printf("  %c", *(((uint8_t *) &(metadata_table_hdr->Signature)) + i));
      }

      printf("\n  EntryCount : %x", metadata_table_hdr->EntryCount);

      auto mdt_entry = (pVHDX_METADATA_TABLE_ENTRY) ((uint8_t *)metadata_table_hdr + sizeof(VHDX_METADATA_TABLE_HEADER));

      for (int i = 0; i < metadata_table_hdr->EntryCount; i++)
      {
        auto entry_type = "Unknown Metadata Table Entry";

        if (mdt_entry->ItemId.Data1 == 0xCAA16737) {
          entry_type = "File Parameters";
        }
        else if (mdt_entry->ItemId.Data1 == 0x2FA54224) {
          entry_type = "Virtual Disk Size";
        }
        else if (mdt_entry->ItemId.Data1 == 0xBECA12AB) {
          entry_type = "Page 83 Data";
        }
        else if (mdt_entry->ItemId.Data1 == 0x8141BF1D) {
          entry_type = "Logical Sector Size";
        }
        else if (mdt_entry->ItemId.Data1 == 0xCDA348C7) {
          entry_type = "Physical Sector Size";
        }
        else if (mdt_entry->ItemId.Data1 == 0xA8D35F2D) {
          entry_type = "Parent Locator";
        }

        printf("\n\n  ------------");
        printf("\n  ItemId, GUID : "); PrintGuid(mdt_entry->ItemId); printf(" {%s} ", entry_type);
        printf("\n  Offset (Region) : %x", mdt_entry->Offset);
        printf("\n  Length : %x", mdt_entry->Length);
        printf("\n  IsUser : %x", mdt_entry->IsUser);
        printf("\n  IsVirtualDisk : %x", mdt_entry->IsVirtualDisk);
        printf("\n  IsRequired : %x", mdt_entry->IsRequired);

        // Read the metadata item

        void *metadata_item = (void *) (iMetadataRaw.get() + mdt_entry->Offset);

        if (mdt_entry->ItemId.Data1 == 0xCAA16737)
        {
          printf("\n ~ BlockSize %x",((pVHDX_FILE_PARAMETERS)metadata_item)->BlockSize);
          printf("\n ~ LeaveBlocksAllocated %x",((pVHDX_FILE_PARAMETERS)metadata_item)->LeaveBlocksAllocated);
          printf("\n ~ HasParent %x",((pVHDX_FILE_PARAMETERS)metadata_item)->HasParent);
        }
        else if (mdt_entry->ItemId.Data1 == 0x2FA54224)
        {
          printf("\n ~ VirtualDiskSize %I64x (%I64d GB)", ((pVHDX_VIRTUAL_DISK_SIZE)metadata_item)->VirtualDiskSize, ((pVHDX_VIRTUAL_DISK_SIZE)metadata_item)->VirtualDiskSize/(1024*1024*1024));
        }
        else if (mdt_entry->ItemId.Data1 == 0xBECA12AB)
        {
          entry_type = "Page 83 Data";
        }
        else if (mdt_entry->ItemId.Data1 == 0x8141BF1D) 
        {
          printf("\n ~ LogicalSectorSize %x", ((pVHDX_VIRTUAL_DISK_LOGICAL_SECTOR_SIZE)metadata_item)->LogicalSectorSize);
        }
        else if (mdt_entry->ItemId.Data1 == 0xCDA348C7)
        {
          printf("\n ~ PhysicalSectorSize %x", ((pVHDX_VIRTUAL_DISK_PHYSICAL_SECTOR_SIZE)metadata_item)->PhysicalSectorSize);
        }
        else if (mdt_entry->ItemId.Data1 == 0xA8D35F2D)
        {
          auto pl = (pVHDX_PARENT_LOCATOR) metadata_item;

          for (int i = 0; i < pl->iHeader.KeyValueCount; i++)
          {
            printf("\n\n  [k%d] : ", i);

            for (int j = 0; j < pl->iEntries[i].KeyLength; j++)
            {
              printf("%c", *((uint8_t *)metadata_item + pl->iEntries[i].KeyOffset + j));
            }

            printf("\n  [v%d] : ", i);

            for (int j = 0; j < pl->iEntries[i].ValueLength; j++)
            {
              printf("%c", *((uint8_t *)metadata_item + pl->iEntries[i].ValueOffset + j));
            }
          }
        }

        mdt_entry++;
      }

      CBaseDisk::DumpStructure();

      std::cout << "\n\n";
    }

  protected:

    uint64_t iDataBlocksCount = 0;

    uint64_t iTotalBatEntries = 0;

    uint64_t iSectorBitmapBlocksCount = 0;

    virtual size_t DataBlockRead(DataBlockIO& f) override
    {
      uint64_t pb_entry_cnt = f.offset / GetBlockSize();
      uint64_t sb_entry_cnt = pb_entry_cnt / iChunkRatio;

      uint64_t batindex = pb_entry_cnt + sb_entry_cnt;
      uint64_t batentry = iBAT[batindex];

      auto blockoff = f.offset % GetBlockSize();

      int state = VHDX_BAT_ENTRY_GET_STATE(batentry);

      if (state == VHDX_BAT_ENTRY_PAYLOAD_BLOCK_FULLY_PRESENT ||
          state == VHDX_BAT_ENTRY_PAYLOAD_BLOCK_PARTIALLY_PRESENT) 
      {
        auto fRet = Subject::ReadSync(f.buffer, f.length, ((((VHDX_BAT_ENTRY *) &batentry)->FileOffsetMB) * _1M) + blockoff);
        assert(fRet == f.length);
      }

      return f.length;
    }

    virtual size_t DataBlockWrite(DataBlockIO& f) override
    {
      uint64_t pb_entry_cnt = f.offset / GetBlockSize();
      uint64_t sb_entry_cnt = pb_entry_cnt / iChunkRatio;

      uint64_t batindex = pb_entry_cnt + sb_entry_cnt;
      uint64_t batentry = iBAT[batindex];

      auto blockoff = f.offset % GetBlockSize();

      int state = VHDX_BAT_ENTRY_GET_STATE(batentry);

      memset(iPayloadBlock.get(), 0, GetBlockSize());

      if (state == VHDX_BAT_ENTRY_PAYLOAD_BLOCK_NOT_PRESENT)
      {
        // position fragment buffer inside the new payload block
        memmove(iPayloadBlock.get() + blockoff, f.buffer, f.length);

        // new block's bat entry state
        ((VHDX_BAT_ENTRY *) &batentry)->FileOffsetMB = FirstDataBlockOffsetMB() + ((iBlockCount * GetBlockSize()) / _1M);
        ((VHDX_BAT_ENTRY *) &batentry)->State = VHDX_BAT_ENTRY_PAYLOAD_BLOCK_FULLY_PRESENT;

        iBAT[batindex] = *((uint64_t *) &batentry);

        // write the new payload block
        auto fRet = Subject::WriteSync(iPayloadBlock.get(), GetBlockSize(), (((VHDX_BAT_ENTRY *) &batentry)->FileOffsetMB) * _1M);

        assert(fRet == GetBlockSize());

        iBlockCount++;
      }
      else if (state == VHDX_BAT_ENTRY_PAYLOAD_BLOCK_FULLY_PRESENT)
      {
        assert(false);
      }

      return f.length;
    }

    virtual void InitializeFileIdentifier()
    {
      memmove((void *) &iFileIdentifier.Signature, "vhdxfile", strlen("vhdxfile"));
      memmove((void *) &iFileIdentifier.Creator, L"MSys Technologies", wcslen(L"MSys Technologies") * sizeof(wchar_t));
    }

    virtual void InitializeHeader()
    {
      memmove((void *) &iHeader.Signature, "head", strlen("head"));

      iHeader.SequenceNumber = 0;

      GUID guid;
      CoCreateGuid(&guid);
      memmove(&iHeader.FileWriteGuid, &guid, sizeof(GUID));

      CoCreateGuid(&guid);
      memmove(&iHeader.DataWriteGuid, &guid, sizeof(GUID));

      iHeader.Version = 1;
      iHeader.LogLength = _1M;
      iHeader.LogOffset = _1M;

      memset((void *) &iHeader.Checksum, 0, 4);
      iHeader.Checksum = crc32c_value((uint8_t *) &iHeader, _4K);
    }

    virtual void InitializeRegionTable()
    {
      // region table entry for BAT region
      memmove((void *) &iRegionTable.Entries[0].Guid, &_GUID_REGION_BAT, sizeof(__GUID));
      iRegionTable.Entries[0].Required = 1;
      iRegionTable.Entries[0].FileOffset = _3M;
      iRegionTable.Entries[0].Length = (uint32_t)iBATSize;

      // region table entry for metadata region
      memmove((void *) &iRegionTable.Entries[1].Guid, &_GUID_REGION_METADATA, sizeof(__GUID));
      iRegionTable.Entries[1].Required = 1;
      iRegionTable.Entries[1].FileOffset = _2M;
      iRegionTable.Entries[1].Length = _1M;

      // region table header
      memmove((void *) &iRegionTable.Header.Signature, "regi", strlen("regi"));
      
      iRegionTable.Header.EntryCount = 2;
      
      memset((void *) &iRegionTable.Header.Checksum, 0, 4);

      uint8_t _buf[_64K] = { 0 };
      memmove(_buf, &iRegionTable, sizeof(VHDX_REGION_TABLE));

      iRegionTable.Header.Checksum = crc32c_value(_buf, _64K);
    }

    virtual void InitializeMetadataRegion(uint64_t size, uint32_t blocksize, CDynamicVHDx *parent)
    {
      memmove((void *) &iMetadata.iTable.Header.Signature, "metadata", strlen("metadata"));
      iMetadata.iTable.Header.EntryCount = parent ? 6 : 5; 

      iMetadata.iTable.Entries[0].IsUser = 0;
      iMetadata.iTable.Entries[0].IsRequired = 1;
      iMetadata.iTable.Entries[0].IsVirtualDisk = 0;
      iMetadata.iTable.Entries[0].ItemId = _GUID_FILE_PARAMETERS;
      iMetadata.iTable.Entries[0].Offset = _64K;
      iMetadata.iTable.Entries[0].Length = sizeof(VHDX_FILE_PARAMETERS);

      iMetadata.iTable.Entries[1].IsUser = 0;
      iMetadata.iTable.Entries[1].IsRequired = 1;
      iMetadata.iTable.Entries[1].IsVirtualDisk = 1;
      iMetadata.iTable.Entries[1].ItemId = _GUID_VIRTUAL_DISK_SIZE;
      iMetadata.iTable.Entries[1].Offset = _64K + sizeof(VHDX_FILE_PARAMETERS);
      iMetadata.iTable.Entries[1].Length = sizeof(VHDX_VIRTUAL_DISK_SIZE);

      iMetadata.iTable.Entries[2].IsUser = 0;
      iMetadata.iTable.Entries[2].IsRequired = 1;
      iMetadata.iTable.Entries[2].IsVirtualDisk = 1;
      iMetadata.iTable.Entries[2].ItemId = _GUID_LOGICAL_SECTOR_SIZE;
      iMetadata.iTable.Entries[2].Offset = _64K + sizeof(VHDX_FILE_PARAMETERS) + sizeof(VHDX_VIRTUAL_DISK_SIZE);
      iMetadata.iTable.Entries[2].Length = sizeof(VHDX_VIRTUAL_DISK_LOGICAL_SECTOR_SIZE);

      iMetadata.iTable.Entries[3].IsUser = 0;
      iMetadata.iTable.Entries[3].IsRequired = 1;
      iMetadata.iTable.Entries[3].IsVirtualDisk = 1;
      iMetadata.iTable.Entries[3].ItemId = _GUID_PHYSICAL_SECTOR_SIZE;
      iMetadata.iTable.Entries[3].Offset = _64K + sizeof(VHDX_FILE_PARAMETERS) + sizeof(VHDX_VIRTUAL_DISK_SIZE) + sizeof(VHDX_VIRTUAL_DISK_LOGICAL_SECTOR_SIZE);
      iMetadata.iTable.Entries[3].Length = sizeof(VHDX_VIRTUAL_DISK_PHYSICAL_SECTOR_SIZE);

      iMetadata.iTable.Entries[4].IsUser = 0;
      iMetadata.iTable.Entries[4].IsRequired = 1;
      iMetadata.iTable.Entries[4].IsVirtualDisk = 0;
      iMetadata.iTable.Entries[4].ItemId = _GUID_PAGE_83_DATA;
      iMetadata.iTable.Entries[4].Offset = _64K + sizeof(VHDX_FILE_PARAMETERS) + sizeof(VHDX_VIRTUAL_DISK_SIZE) + sizeof(VHDX_VIRTUAL_DISK_LOGICAL_SECTOR_SIZE) + sizeof(VHDX_VIRTUAL_DISK_PHYSICAL_SECTOR_SIZE);
      iMetadata.iTable.Entries[4].Length = sizeof(VHDX_PAGE83_DATA);

      uint32_t lss = 512, pss = 512;

      if (parent)
      {
        iMetadata.iTable.Entries[5].IsUser = 0;
        iMetadata.iTable.Entries[5].IsRequired = 1;
        iMetadata.iTable.Entries[5].IsVirtualDisk = 0;
        iMetadata.iTable.Entries[5].ItemId = _GUID_PARENT_LOCATOR;
        iMetadata.iTable.Entries[5].Offset = iMetadata.iTable.Entries[4].Offset + sizeof(VHDX_PAGE83_DATA);
        iMetadata.iTable.Entries[5].Length = sizeof(VHDX_PARENT_LOCATOR);

        auto pl = &iMetadata.iObjects.iParentLocator;

        pl->iHeader.LocatorType = {0xB04AEFB7, 0xD19E, 0x4A81, { 0xB7, 0x89, 0x25, 0xB8, 0xE9, 0x44, 0x59, 0x13 } };
        pl->iHeader.KeyValueCount = 2;

        memmove(pl->iPlkv[0].key, L"parent_linkage", wcslen(L"parent_linkage") * sizeof(wchar_t));
        auto guid = GuidToWString(parent->iHeader.DataWriteGuid);
        memmove(pl->iPlkv[0].value, guid.c_str(), guid.size() * sizeof(wchar_t));

        memmove(pl->iPlkv[1].key, L"relative_path", wcslen(L"relative_path") * sizeof(wchar_t));
        std::wstring ru = L".\\" + parent->iPath.filename().wstring();
        memmove(pl->iPlkv[1].value, ru.c_str(), ru.size() * sizeof(wchar_t));

        pl->iEntries[0].KeyOffset = sizeof(VHDX_PARENT_LOCATOR_HEADER) +  (2 * sizeof(VHDX_PARENT_LOCATOR_ENTRY));
        pl->iEntries[0].KeyLength = (uint16_t) (wcslen(pl->iPlkv[0].key) * sizeof(wchar_t));
        pl->iEntries[0].ValueOffset = pl->iEntries[0].KeyOffset + sizeof(VHDX_PL_KV::key);
        pl->iEntries[0].ValueLength = (uint16_t) (guid.size() * sizeof(wchar_t));

        pl->iEntries[1].KeyOffset = pl->iEntries[0].ValueOffset + sizeof(VHDX_PL_KV::value);
        pl->iEntries[1].KeyLength = (uint16_t) (wcslen(pl->iPlkv[1].key) * sizeof(wchar_t));
        pl->iEntries[1].ValueOffset = pl->iEntries[1].KeyOffset + sizeof(VHDX_PL_KV::key);
        pl->iEntries[1].ValueLength = (uint16_t) (ru.size() * sizeof(wchar_t));

        lss = parent->iMetadata.iObjects.iLogicalSectorSize.LogicalSectorSize;
        pss = parent->iMetadata.iObjects.iPhysicalSectorSize.PhysicalSectorSize;
      }

      iMetadata.iObjects.iFileParameters.HasParent = parent ? 1 : 0;
      iMetadata.iObjects.iFileParameters.BlockSize = blocksize;
      iMetadata.iObjects.iVirtualDiskSize.VirtualDiskSize = size;
      iMetadata.iObjects.iLogicalSectorSize.LogicalSectorSize = lss;
      iMetadata.iObjects.iPhysicalSectorSize.PhysicalSectorSize = pss;

      GUID guid;
      CoCreateGuid(&guid);
      memmove(&iMetadata.iObjects.iPage83Data, &guid, sizeof(GUID));
    }

    virtual void InitializeBATRegion()
    {
      iChunkRatio = (uint32_t) ((pow(2, 23) * 512) / GetBlockSize());
      
      iDataBlocksCount = GetLogicalDiskLength() / GetBlockSize();

      if (GetLogicalDiskLength() % GetBlockSize())
      {
        iDataBlocksCount += 1;
      }

      iSectorBitmapBlocksCount = iDataBlocksCount / iChunkRatio;

      if (IsDifferencing())
      {
        if (iDataBlocksCount % iChunkRatio)
        {
          iSectorBitmapBlocksCount += 1;
        }
      }

      iTotalBatEntries = iDataBlocksCount + iSectorBitmapBlocksCount;

      iBATSize = iTotalBatEntries * sizeof(uint64_t);
      
      if (iBATSize % _1M)
      {
        iBATSize += _1M - (iBATSize % _1M);
      }

      assert((iBATSize % _1M) == 0);

      iBAT = std::make_unique<uint64_t []>(iBATSize / sizeof(uint64_t));

      memset(iBAT.get(), 0, iBATSize);
    }
};

using SPCDynamicVHDx = std::shared_ptr<CDynamicVHDx>;

} //namespace

#endif