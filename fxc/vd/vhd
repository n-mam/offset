#ifndef VHD_HPP
#define VHD_HPP

#include <string>

#include <fxc/vd/BaseDisk>
#include <fxc/vd/formats>

namespace fxc {

class VirtualHardDisk : public BaseDisk
{
  public:

  uint64_t iBATSize = 0;

  uint64_t iBlockCount = 0;

  VHD_DISK_FOOTER iFooter = { 0 };

  VHD_SPARSE_HEADER iHeader = { 0 };

  std::unique_ptr<uint32_t []> iBAT = nullptr;

  enum EVHDType : uint32_t
  {
    Fixed = 2,
    Dynamic,
    Differencing
  };

  virtual ~VirtualHardDisk() {}

  // new fixed, dynamic and differencing VHD contstructor
  VirtualHardDisk(
    uint64_t size,
    uint32_t blocksize,
    EVHDType type,
    VirtualHardDisk *parent = nullptr)
  : BaseDisk(size, blocksize, EPartitionType::EMBR)
  {
    InitializeFooter(blocksize + size, type);
    InitializeSparseHeader(blocksize, parent);
    if (type != EVHDType::Fixed)
    {
      InitializeBAT();
    }
    iPayloadBlock = std::make_unique<uint8_t []>(512 + GetBlockSize());
  }

  // Existing VHD constructor
  VirtualHardDisk(const std::wstring& path) : BaseDisk(path, 512 * 3)
  {
    memmove(&iFooter, iRawSectors.get(), 512);
    memmove(&iHeader, iRawSectors.get() + 512, 1024);
    InitializeBAT();
    iFile->ReadSync(
      (uint8_t *) iBAT.get(),
      iBATSize,
      osl::endian_reverse(iHeader.TableOffset));
  }

  virtual uint32_t GetBlockSize() override
  {
    return osl::endian_reverse(iHeader.BlockSize);
  }

  virtual uint64_t GetTotalBATEntries(void)
  {
    return osl::endian_reverse(iHeader.MaxTableEntries);
  }

  virtual uint64_t GetLogicalDiskLength() override
  {
    return osl::endian_reverse(*((uint64_t *)&iFooter.CurrentSize));
  }

  virtual bool IsFixed() override
  {
    return (osl::endian_reverse(*((uint32_t *)&iFooter.DiskType)) == 2);
  }

  virtual bool IsDynamic() override
  {
    return (osl::endian_reverse(*((uint32_t *)&iFooter.DiskType)) == 3);
  }

  virtual bool IsDifferencing() override
  {
    return (osl::endian_reverse(*((uint32_t *)&iFooter.DiskType)) == 4);
  }

  virtual std::vector<std::wstring> GetParentLocators(void) override
  {
    std::vector<std::wstring> out;

    for (int i = 0; i < 8; i++)
    {
      auto off = osl::endian_reverse(*((uint64_t *)&iHeader.ParentLocatorTable[i].PlatformDataOffset));
      auto len = osl::endian_reverse(*((uint32_t *)&iHeader.ParentLocatorTable[i].PlatformDataSpace));

      auto _buf = std::make_unique<uint8_t []>(len);

      if (off && len)
      {
        iFile->ReadSync(_buf.get(), len, off);
        out.push_back((wchar_t *) _buf.get());
      }
    }

    return out;
  }

  virtual uint64_t FirstDataBlockOffset()
  {
    return sizeof(VHD_FOOTER_HEADER) + (IsDifferencing() ? (2 * PLDataSpaceSize) : 0) + iBATSize;
  }

  /*
        |
      ------------------------------------
    |   |     |_____reqLen____|          |
    |   |     |               |          |
      ------------------------------------
        |     ^
            blkOffset

  bit_off_in_bmp represents the bit offset inside the sector bitmap

  ------bit_off_in_bmp------|
    . . . . . . . . . . . . . . . . . . . . . . . . . . . .
        |             |     ^         |           ^   |
                        first sec bit            last sec bit
  */

  static bool SetSectorBitmap(unsigned char *bitmap, uint64_t blockoff, uint64_t blocklen, uint64_t bs)
  {
    uint64_t bmb_index;
    uint64_t bit_off_in_bmp;
    uint64_t len_in_sectors = blocklen / 512;

    //we should have an offset inside the block
    assert(blockoff <= bs);

    //requested window must fall inside the block
    assert((blockoff + blocklen) <= bs);

    //requested length must be less than the block
    assert(blocklen <= bs);
    //
    // | s  | s  | s  |
    //              ^
    bit_off_in_bmp = blockoff / 512;

    bmb_index = bit_off_in_bmp / 8;
    /*
      * bmb_index is the starting byte inside the bitmap which hold the sector usage for the requested
      * starting sector. This loop runs number of sector times which would take to cover the requested
      * length. j varies from 0-7 do this here as once j is aligned on 8 bits we need to retain the bit
      * were the run breaks.
      */
    int j = (bit_off_in_bmp % 8);

    uint64_t i = 0;

    for ( ; i < len_in_sectors; )
    {
      /*
        * j = 0 ---> j < 8
        *  _ _ _ _ _ _ _ _
        *  7 6 5 4 3 2 1 0
        *            |
        *  0 0 0 0 0 0 0 1
        *  - - - - - - - - 0x01
        */
      for (; j < 8 && i < len_in_sectors; j++, i++)
      {
        bitmap[bmb_index] |= 1 << (7 - j);
      }
      /*
        * at this point, we have updated a single and
        * potentially partial byte of the sector bitmap.
        */
      if (j && ((j % 8) == 0))
      {
        //reached the end of a single sector bitmap byte
        bmb_index++;
        j = 0;
      }
    }

    //we parsed all sectors in the requested length
    assert(i == len_in_sectors);

    // for (int b = 0; b < 512; b++)
    // {
    //   logit(L"%2X ", bitmap[b]);
    //   if (!((b+1)%24))
    // }

    return true;
  }

  virtual void DumpStructure(void) override
  {
    LOG << "VHD Footer : ";

    LOG << "Cookie                       : " << std::string((char *)iFooter.Cookie, 8);
    LOG << "DataOffset                   : " << osl::endian_reverse(iFooter.DataOffset);   
    LOG << "Original Size                : " << osl::endian_reverse(*((uint64_t *)&iFooter.OriginalSize));
    LOG << "Current Size                 : " << osl::endian_reverse(*((uint64_t *)&iFooter.CurrentSize));
    LOG << "Creator Application          : " << std::string((char *)iFooter.CreatorApplication, 4);

    LOG << "VHD Sparse Header : ";
    
    LOG << "Cookie                       : " << std::string((char *)iHeader.Cookie, 8);
    LOG << "DataOffset                   : " << osl::endian_reverse(iHeader.DataOffset);
    LOG << "Table Offset                 : " << osl::endian_reverse(iHeader.TableOffset);
    LOG << "Block Size                   : " << osl::endian_reverse(iHeader.BlockSize);

    LOG << "Parent UniqueId              : ";
    DumpBytes(iHeader.ParentUniqueId, 16, true);

    LOG << "Parent TimeStamp             : ";
    DumpBytes(iHeader.ParentTimeStamp, 4, true);

    LOG << L" Parent Name                  : " << (wchar_t *)(iHeader.ParentName + 1); // skip bom

    auto parentLocators = GetParentLocators();

    for(const auto& pl : parentLocators)
    {
      LOG << L" Parent Locator Table Entry   : " << pl;
    }

    auto mte = GetTotalBATEntries();

    LOG << "Max Table Entries            : " << mte;

    uint32_t count = 0;

    for (uint32_t i = 0; i < mte; i++)
    {
      if (iBAT[i] != 0xFFFFFFFF)
      {
        count++;
      }
    }

    LOG << "Valid BAT count              : " << count;

    BaseDisk::DumpStructure();

    LOG << "";
  }

  protected:

  virtual size_t DataBlockRead(DataBlockIO& f) override
  {
    if (IsDynamic() || IsDifferencing())
    {
      uint64_t batindex = f.offset / GetBlockSize();
      uint32_t batentry = osl::endian_reverse(*(iBAT.get() + batindex));

      uint64_t blockoff = f.offset % GetBlockSize();

      if (batentry == ~((uint32_t)0)) // unused block
      {
        memset((void *)f.buffer, 0, f.length);
      }
      else // existing data block
      {
        auto fRet = subject::ReadSync(f.buffer, f.length, (batentry * 512ULL) + 512ULL + blockoff);
        assert(fRet == f.length);
      }
    }
    else if (IsFixed())
    {
      auto fRet = subject::ReadSync(f.buffer, f.length, f.offset);
      assert(fRet == f.length);
    }
    else
    {
      assert(false);
    }

    return f.length;
  }

  virtual size_t DataBlockWrite(DataBlockIO& f) override
  {
    if (IsDynamic() || IsDifferencing())
    {
      uint64_t batindex = f.offset / GetBlockSize();
      uint32_t batentry = osl::endian_reverse(*(iBAT.get() + batindex));

      auto blockoff = f.offset % GetBlockSize();

      if (batentry == ~((uint32_t)0)) // new data block
      {
        if (IsDifferencing())
        {
          memset(iPayloadBlock.get(), 0, 512);
          SetSectorBitmap(iPayloadBlock.get(), blockoff, f.length, GetBlockSize());
        }
        else
        {
          memset(iPayloadBlock.get(), 0xff, 512);
        }

        // zero out the payload block, past the sector bitmap
        memset(iPayloadBlock.get() + 512, 0, GetBlockSize());

        // position fragment buffer inside the new payload block
        memmove(iPayloadBlock.get() + 512 + blockoff, f.buffer, f.length);

        // new block entry
        uint64_t fileoffset = FirstDataBlockOffset() + (iBlockCount * (512 + GetBlockSize()));
        iBAT[batindex] = osl::endian_reverse((uint32_t)(fileoffset / 512));

        // write the new payload block
        auto fRet = subject::WriteSync(iPayloadBlock.get(), 512 + GetBlockSize(), fileoffset);

        assert(fRet == 512 + GetBlockSize());

        iBlockCount++;
      }
      else // existing data block
      {
        if (IsDifferencing())
        {
          // zero out the complete data block (sb + data)
          memset(iPayloadBlock.get(), 0, 512 + GetBlockSize());

          // read the complete data block (sb + data) off the disk.
          subject::ReadSync(iPayloadBlock.get(), 512 + GetBlockSize(), batentry * 512);

          SetSectorBitmap(iPayloadBlock.get(), blockoff, f.length, GetBlockSize());

          // position fragment buffer inside the payload block we just read
          memmove(iPayloadBlock.get() + 512 + blockoff, f.buffer, f.length);

          auto fRet = subject::WriteSync(iPayloadBlock.get(), 512 + GetBlockSize(), batentry * 512ULL);

          assert(fRet == 512 + GetBlockSize());
        }
        else
        {
          memset(iPayloadBlock.get(), 0xff, 512); // ??
          auto fRet = subject::WriteSync(f.buffer, f.length, (batentry * 512ULL) + 512ULL + blockoff);
          assert(fRet == f.length);
        }
      }
    }
    else if (IsFixed())
    {
      auto fRet = subject::WriteSync(f.buffer, f.length, f.offset);
      assert(fRet == f.length);
    }
    else
    {
      assert(false);
    }

    return f.length;
  }

  void InitializeFooter(uint64_t size, EVHDType type)
  {
    memmove(&iFooter, "conectix", strlen("conectix"));

    iFooter.Features[3] = 0x02;

    iFooter.FileFormatVersion[1] = 0x01;

    if (type == EVHDType::Fixed)
    {
      iFooter.DataOffset = ~((uint64_t)0);
    }
    else
    {
      iFooter.DataOffset = osl::endian_reverse((uint64_t)sizeof(VHD_DISK_FOOTER));
    }

    *((uint32_t *) &iFooter.TimeStamp) = osl::endian_reverse(uint32_t((std::time(nullptr) - 946684800)));

    memmove(&iFooter.CreatorApplication, "n-mam", strlen("n-mam"));

    iFooter.CreatorHostOS[0] = 0x57;
    iFooter.CreatorHostOS[1] = 0x69;
    iFooter.CreatorHostOS[2] = 0x32;
    iFooter.CreatorHostOS[3] = 0x6B;

    *((uint64_t *) &iFooter.CurrentSize) = osl::endian_reverse(size);
    *((uint64_t *) &iFooter.OriginalSize) = osl::endian_reverse(size);

    *((uint32_t *) &iFooter.DiskType) = osl::endian_reverse(type);

    iFooter.Checksum = 0;

    iFooter.SavedState = 0;

    memset(&iFooter.Reserved, 0, 427);

    uint64_t checksum = 0;

    for (int i = 0; i < sizeof(VHD_DISK_FOOTER); i++)
    {
      checksum += ((uint8_t *)&iFooter)[i];
    }

    iFooter.Checksum = osl::endian_reverse(uint32_t(~checksum));
  }

  void InitializeSparseHeader(uint32_t blocksize, VirtualHardDisk *parent = nullptr)
  {
    memmove(&iHeader, "cxsparse", strlen("cxsparse"));

    iHeader.DataOffset = ~((uint64_t)0);

    uint64_t tableOffset = sizeof(VHD_FOOTER_HEADER) + (IsDifferencing() ? (2 * PLDataSpaceSize) : 0);
    iHeader.TableOffset = osl::endian_reverse(tableOffset);

    memset(&(iHeader.HeaderVersion), 0, 4);
    iHeader.HeaderVersion[1] = 0x01;

    iHeader.BlockSize = osl::endian_reverse(blocksize);

    uint64_t maxTableEntries = GetLogicalDiskLength() / GetBlockSize();

    if (GetLogicalDiskLength() % GetBlockSize())
    {
      maxTableEntries += 1;
    }

    iHeader.MaxTableEntries = osl::endian_reverse((uint32_t)maxTableEntries);

    if (IsDifferencing())
    {
      assert(parent);

      memmove(iHeader.ParentUniqueId, parent->iFooter.UniqueId, 16);
      memmove(iHeader.ParentTimeStamp, parent->iFooter.TimeStamp, 4);
      memmove(iHeader.ParentName + 1, parent->iPath.wstring().c_str(), parent->iPath.wstring().size() * sizeof(wchar_t));

      // ple 1
      memmove(iHeader.ParentLocatorTable[0].PlatformCode, "W2ku" , 4);
      osl::LTOB32(PLDataSpaceSize, iHeader.ParentLocatorTable[0].PlatformDataSpace);
      osl::LTOB32(parent->iPath.wstring().size() * sizeof(wchar_t), iHeader.ParentLocatorTable[0].PlatformDataLength);
      osl::LTOB64(sizeof(VHD_FOOTER_HEADER), iHeader.ParentLocatorTable[0].PlatformDataOffset);

      std::wstring ru = L".\\" + parent->iPath.filename().wstring();

      // ple 2
      memmove(iHeader.ParentLocatorTable[1].PlatformCode, "W2kru" , 5);
      osl::LTOB32(PLDataSpaceSize, iHeader.ParentLocatorTable[1].PlatformDataSpace);
      osl::LTOB32(ru.size() * sizeof(wchar_t), iHeader.ParentLocatorTable[1].PlatformDataLength);
      osl::LTOB64(sizeof(VHD_FOOTER_HEADER) + PLDataSpaceSize, iHeader.ParentLocatorTable[1].PlatformDataOffset);        
    }

    iHeader.Checksum = 0;

    uint64_t checksum = 0;

    for (int i = 0; i < sizeof(iHeader); i++)
    {
      checksum += ((uint8_t *) &iHeader)[i];
    }

    iHeader.Checksum = osl::endian_reverse((uint32_t)(~checksum));
  }

  void InitializeBAT()
  {
    uint64_t n = osl::endian_reverse(iHeader.MaxTableEntries);

    iBATSize = n * sizeof(uint32_t);

    if (iBATSize % 512)
    {
      iBATSize += 512 - (iBATSize % 512);
    }

    iBAT = std::make_unique<uint32_t []>(iBATSize / sizeof(uint32_t));

    memset(iBAT.get(), 0xFF, iBATSize);
  }
};

using SPVirtualHardDisk = std::shared_ptr<VirtualHardDisk>;

} //namespace

#endif